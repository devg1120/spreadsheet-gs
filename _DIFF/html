
##  ../src/config.js  ->  ../../x-spreadsheet/src/config.js  
```
```

##  ../src/index.js  ->  ../../x-spreadsheet/src/index.js  
```
../src/index.js                              ../../x-spreadsheet/src/index.js            

       1 /* global window, document */              1 /* global window, document */      

       2 import { h } from './component/elem        2 import { h } from './component/elem

ent';                                        ent';                                       

       3 import DataProxy from './core/data_        3 import DataProxy from './core/data_

proxy';                                      proxy';                                     

       4 import Sheet from './component/shee        4 import Sheet from './component/shee

t';                                          t';                                         

                                                    5 import Bottombar from './component/

                                             bottombar';                                 

       5 import { cssPrefix } from './config        6 import { cssPrefix } from './config

';                                           ';                                          

       6 import { locale } from './locale/lo        7 import { locale } from './locale/lo

cale';                                       cale';                                      

       7 import './index.less';                     8 import './index.less';             

       8 import Tweakpane from 'tweakpane';         9                                    

       9                                           10                                    

      10 class Spreadsheet {                       11 class Spreadsheet {                

      11                                                                                 

      12   constructor(selectors, options =        12   constructor(selectors, options = 

{}) {                                        {}) {                                       

      13     let targetEl = selectors;             13     let targetEl = selectors;      

      14     let targetEl2 = selectors;            14     this.options = options;        

                                                   15     this.sheetIndex = 1;           

                                                   16     this.datas = [];               

      15     if (typeof selectors === 'strin       17     if (typeof selectors === 'strin

g') {                                        g') {                                       

      16       targetEl = document.querySele       18       targetEl = document.querySele

ctor(selectors);                             ctor(selectors);                            

      17       targetEl2 = document.querySel                                             

ector(selectors+'2');                                                                    

      18     }                                     19     }                              

      19     this.data = new DataProxy('shee       20     this.bottombar = new Bottombar(

t1', options);                               () => {                                     

      20     this.data2 = new DataProxy('she       21       const d = this.addSheet();   

et2', options);                                                                          

      21                                           22       this.sheet.resetData(d);     

                                                   23     }, (index) => {                

                                                   24       const d = this.datas[index]; 

                                                   25       this.sheet.resetData(d);     

                                                   26     }, () => {                     

                                                   27       this.deleteSheet();          

                                                   28     }, (index, value) => {         

                                                   29       this.datas[index].name = valu

                                             e;                                          

                                                   30     });                            

                                                   31     this.data = this.addSheet();   

      22     const rootEl = h('div', `${cssP       32     const rootEl = h('div', `${cssP

refix}`)                                     refix}`)                                    

      23       .on('contextmenu', evt => evt                                             

.preventDefault());                                                                      

      24     const rootEl2 = h('div', `${css                                             

Prefix}`)                                                                                

      25       .on('contextmenu', evt => evt       33       .on('contextmenu', evt => evt

.preventDefault());                          .preventDefault());                         

      26     // create canvas element              34     // create canvas element       

      27     targetEl.appendChild(rootEl.el)       35     targetEl.appendChild(rootEl.el)

;                                            ;                                           

      28     targetEl2.appendChild(rootEl2.e                                             

l);                                                                                      

      29     this.sheet = new Sheet(rootEl,        36     this.sheet = new Sheet(rootEl, 

this.data);                                  this.data);                                 

      30     this.sheet2 = new Sheet(rootEl2       37     rootEl.child(this.bottombar.el)

, this.data2);                               ;                                           

      31                                                                                 

      32     this.data.verticalAddSplitSheet                                             

(this.sheet2);                                                                           

      33     this.data2.verticalAddSplitShee                                             

t(this.sheet);                                                                           

      34     //this.data.horizontalAddSplitS                                             

heet(this.sheet2);                                                                       

      35     //this.data2.horizontalAddSplit                                             

Sheet(this.sheet);                                                                       

      36   }                                       38   }                                

      37                                           39                                    

      38   getEl() {                               40   addSheet(name) {                 

      39      return this.rootEl2;                 41     const n = name || `sheet${this.

                                             sheetIndex}`;                               

                                                   42     const d = new DataProxy(n, this

                                             .options);                                  

                                                   43     this.datas.push(d);            

                                                   44     // console.log('d:', n, d, this

                                             .datas);                                    

                                                   45     this.bottombar.addItem(n, true)

                                             ;                                           

                                                   46     this.sheetIndex += 1;          

                                                   47     return d;                      

      40   }                                       48   }                                

      41                                           49                                    

                                                   50   deleteSheet() {                  

                                                   51     const [oldIndex, nindex] = this

                                             .bottombar.deleteItem();                    

                                                   52     if (oldIndex >= 0) {           

                                                   53       this.datas.splice(oldIndex, 1

                                             );                                          

                                                   54       if (nindex >= 0) this.sheet.r

                                             esetData(this.datas[nindex]);               

                                                   55     }                              

                                                   56   }                                

                                                   57                                    

      42   loadData(data ) {                       58   loadData(data) {                 

      43     this.sheet.loadData(data);  //s       59     const d = Array.isArray(data) ?

plitsheet 同じdataをロードする                data[0] : data;                            

      44     this.sheet2.loadData(data);           60     this.sheet.loadData(d);        

      45     //this.sheet2.loadData(this.she                                             

et.exportData());                                                                        

      46     return this;                          61     return this;                   

      47   }                                       62   }                                

      48                                           63                                    

      49   getData() {                             64   getData() {                      

      50     return this.data.getData();           65     return this.datas.map(it => it.

                                             getData());                                 

                                                   66   }                                

                                                   67                                    

                                                   68   on(eventName, func) {            

                                                   69     this.sheet.on(eventName, func);

                                                   70     return this;                   

      51   }                                       71   }                                

      52                                           72                                    

      53   validate() {                            73   validate() {                     

      54     const { validations } = this.da       74     const { validations } = this.da

ta;                                          ta;                                         

      55     return validations.errors.size        75     return validations.errors.size 

<= 0;                                        <= 0;                                       

      56   }                                       76   }                                

      57                                           77                                    

      58   change(cb) {                            78   change(cb) {                     

      59     console.log("Spreadsheet change                                             

");                                                                                      

      60     this.data.change = cb;                79     this.data.change = cb;         

      61     return this;                          80     return this;                   

      62   }                                       81   }                                

      63                                           82                                    

      64   static locale(lang, message) {          83   static locale(lang, message) {   

---                                          ---                                         

      72   window.x = window.x || {};              91   window.x = window.x || {};       

      73   window.x.spreadsheet = spreadshee       92   window.x.spreadsheet = spreadshee

t;                                           t;                                          

      74   window.x.spreadsheet.locale = (la       93   window.x.spreadsheet.locale = (la

ng, message) => locale(lang, messag          ng, message) => locale(lang, messag         

e);                                          e);                                         

      75 }                                         94 }                                  

      76                                           95                                    

      77 //--------------------------------                                              

      78 //const pane = new Tweakpane({conta                                             

iner: spreadsheet.getEl(),});                                                            

      79     const pane = new Tweakpane();                                               

      80         const PARAMS = {                                                        

      81                 b: true,                                                        

      82                 c: '#ff8800',                                                   

      83                 n: 50,                                                          

      84                 s: 'string',                                                    

      85         };                                                                      

      86         const nf = pane.addFolder({                                             

      87                 title: 'Number',                                                

      88         });                                                                     

      89         nf.addInput(PARAMS, 'n', {                                              

      90                 label: 'text',                                                  

      91         });                                                                     

      92         nf.addInput(PARAMS, 'n', {                                              

      93                 label: 'slider',                                                

      94                 max: 100,                                                       

      95                 min: 0,                                                         

      96         });                                                                     

      97         nf.addInput(PARAMS, 'n', {                                              

      98                 label: 'list',                                                  

      99                 options: {                                                      

     100                         low: 0,                                                 

     101                         medium: 50,                                             

     102                         high: 100,                                              

     103                 },                                                              

     104         });                                                                     

     105         const sf = pane.addFolder({                                             

     106                 title: 'String',                                                

     107         });                                                                     

     108         sf.addInput(PARAMS, 's', {                                              

     109                 label: 'text',                                                  

     110         });                                                                     

     111         sf.addInput(PARAMS, 's', {                                              

     112                 label: 'list',                                                  

     113                 options: {                                                      

     114                         dark: 'Dark                                             

',                                                                                       

     115                         light: 'Lig                                             

ht',                                                                                     

     116                 },                                                              

     117         });                                                                     

     118         const bf = pane.addFolder({                                             

     119                 title: 'Boolean',                                               

     120         });                                                                     

     121         bf.addInput(PARAMS, 'b', {                                              

     122                 label: 'checkbox',                                              

     123         });                                                                     

     124         const cf = pane.addFolder({                                             

     125                 title: 'Color',                                                 

     126         });                                                                     

     127         cf.addInput(PARAMS, 'c', {                                              

     128                 label: 'text',                                                  

     129         });                                                                     

     130 //--------------------------------                                              

     131 export default Spreadsheet;               96 export default Spreadsheet;        

     132 export {                                  97 export {                           

     133   spreadsheet,                            98   spreadsheet,                     

     134 };                                        99 };                                 

```

##  ../src/index.less  ->  ../../x-spreadsheet/src/index.less  
```
../src/index.less                            ../../x-spreadsheet/src/index.less          

     115     margin: 0;                           115     margin: 0;                     

     116     padding: 0;                          116     padding: 0;                    

     117     border-collapse: separate;           117     border-collapse: separate;     

     118     border-spacing: 2;                   118     border-spacing: 2;             

     119     background: #fff;                    119     background: #fff;              

     120                                          120                                    

     121     td {                                 121     td {                           

     122       margin: 0;                         122       margin: 0;                   

     123       cursor: pointer;                   123       cursor: pointer;             

     124       border: 1px solid transparent      124       border: 1px solid transparent

;                                            ;                                           

     125                                          125                                    

---                                          ---                                         

     211       top: calc(~'100% + 5px');          211       top: calc(~'100% + 5px');    

     212       right: 0;                          212       right: 0;                    

     213     }                                    213     }                              

     214   }                                      214   }                                

     215                                          215                                    

                                                  216   &.top-left {                     

                                                  217     .@{css-prefix}-dropdown-content

                                              {                                          

                                                  218       bottom: calc(~'100% + 5px'); 

                                                  219       left: 0;                     

                                                  220     }                              

                                                  221   }                                

                                                  222                                    

                                                  223   &.top-right {                    

                                                  224     .@{css-prefix}-dropdown-content

                                              {                                          

                                                  225       bottom: calc(~'100% + 5px'); 

                                                  226       right: 0;                    

                                                  227     }                              

                                                  228   }                                

                                                  229                                    

                                                  230                                    

     216   .@{css-prefix}-dropdown-title {        231   .@{css-prefix}-dropdown-title {  

     217     padding: 0 5px;                      232     padding: 0 5px;                

     218     display: inline-block;               233     display: inline-block;         

     219   }                                      234   }                                

     220                                          235                                    

---                                          ---                                         

     264 .@{css-prefix}-scrollbar {               279 .@{css-prefix}-scrollbar {         

     265   position: absolute;                    280   position: absolute;              

     266   bottom: 0;                             281   bottom: 0;                       

     267   right: 0;                              282   right: 0;                        

     268   background-color: #f4f5f8;             283   background-color: #f4f5f8;       

     269   opacity: 0;                            284   opacity: 0.9;                    

     270   z-index: 12;                           285   z-index: 12;                     

     271   &.horizontal {                         286   &.horizontal {                   

     272     // right: 15px;                      287     right: 15px;                   

     273     overflow-x: scroll;                  288     overflow-x: scroll;            

     274     overflow-y: hidden;                  289     overflow-y: hidden;            

                                                  290     > div {                        

                                                  291       height: 1px;                 

                                                  292       background: #ddd;            

                                                  293     }                              

     275   }                                      294   }                                

     276   &.vertical {                           295   &.vertical {                     

     277     // bottom: 15px;                     296     bottom: 15px;                  

     278     overflow-x: hidden;                  297     overflow-x: hidden;            

     279     overflow-y: scroll;                  298     overflow-y: scroll;            

                                                  299     > div {                        

                                                  300       width: 1px;                  

                                                  301       background: #ddd;            

                                                  302     }                              

     280   }                                      303   }                                

     281   &:hover {                              304   &:hover {                        

     282     opacity: .85;                        305     // opacity: .85;               

     283   }                                      306   }                                

     284 }                                        307 }                                  

     285                                          308                                    

     286 /* @{css-prefix}-overlayer */            309 /* @{css-prefix}-overlayer */      

     287 .@{css-prefix}-overlayer {               310 .@{css-prefix}-overlayer {         

---                                          ---                                         

     297     height: 100%;                        320     height: 100%;                  

     298   }                                      321   }                                

     299 }                                        322 }                                  

     300                                          323                                    

     301 .@{css-prefix}-editor, .@{css-prefi      324 .@{css-prefix}-editor, .@{css-prefi

x}-selector {                                x}-selector {                               

                                                  325   box-sizing: content-box;         

     302   position: absolute;                    326   position: absolute;              

     303   overflow: hidden;                      327   overflow: hidden;                

     304   pointer-events: none;                  328   pointer-events: none;            

     305   top: 0;                                329   top: 0;                          

     306   left: 0;                               330   left: 0;                         

---                                          ---                                         

     308   height: 100%;                          332   height: 100%;                    

     309 }                                        333 }                                  

     310                                          334                                    

     311 /* @{css-prefix}-selector */             335 /* @{css-prefix}-selector */       

     312 .@{css-prefix}-selector {                336 .@{css-prefix}-selector {          

                                                  337   .hide-input {                    

                                                  338     position: absolute;            

                                                  339     z-index: 0;                    

                                                  340     input {                        

                                                  341       width: 0;                    

                                                  342       border: none;                

                                                  343     }                              

                                                  344   }                                

     313   .@{css-prefix}-selector-area {         345   .@{css-prefix}-selector-area {   

     314     position: absolute;                  346     position: absolute;            

     315     border: 2px solid rgb(75, 137,       347     border: 2px solid rgb(75, 137, 

255);                                        255);                                       

     316     background: rgba(75, 137, 255,       348     background: rgba(75, 137, 255, 

.1);                                         .1);                                        

                                                  349     z-index: 5;                    

     317   }                                      350   }                                

     318   .@{css-prefix}-selector-clipboard      351   .@{css-prefix}-selector-clipboard

, .@{css-prefix}-selector-autofill           , .@{css-prefix}-selector-autofill          

{                                            {                                           

     319     position: absolute;                  352     position: absolute;            

     320     background: transparent;             353     background: transparent;       

     321     z-index: 100;                        354     z-index: 100;                  

---                                          ---                                         

     346     text-align: left;                    379     text-align: left;              

     347     border: 2px solid rgb(75, 137,       380     border: 2px solid rgb(75, 137, 

255);                                        255);                                       

     348     line-height: 0;                      381     line-height: 0;                

     349     z-index: 100;                        382     z-index: 100;                  

     350     pointer-events: auto;                383     pointer-events: auto;          

     351                                          384                                    

     352     textarea {                           385     textarea {                     

     353       box-sizing: content-box;           386       box-sizing: content-box;     

     354       border: none;                      387       border: none;                

     355       padding: 0 3px;                    388       padding: 0 3px;              

     356       outline-width: 0;                  389       outline: none;               

     357 //      height:auto;                                                            

     358 //      resize: none;                    390       resize: none;                

     359       text-align: start;                 391       text-align: start;           

     360       overflow-y: hidden;                392       overflow-y: hidden;          

     361       font: 400 13px Arial, 'Lato',      393       font: 400 13px Arial, 'Lato',

 'Source Sans Pro', Roboto, Helveti           'Source Sans Pro', Roboto, Helveti         

ca, sans-serif;                              ca, sans-serif;                             

     362 //      color: inherit;                  394       color: inherit;              

     363       color: red;                                                               

     364 //      white-space: normal;             395       white-space: normal;         

     365       white-space: pre;                                                         

     366  //     word-wrap: break-word;           396       word-wrap: break-word;       

     367       line-height: 22px;                 397       line-height: 22px;           

     368       margin: 0;                         398       margin: 0;                   

     369     }                                    399     }                              

     370                                          400                                    

     371     .textline {                          401     .textline {                    

     372       overflow: hidden;                  402       overflow: hidden;            

     373       visibility: hidden;                403       visibility: hidden;          

     374       position: fixed;                   404       position: fixed;             

     375       top:10;                            405       top: 0;                      

     376       left: 0;                           406       left: 0;                     

     377     }                                    407     }                              

     378   }                                      408   }                                

     379 }                                        409 }                                  

     380                                          410                                    

---                                          ---                                         

     388   line-height: 26px;                     418   line-height: 26px;               

     389   list-style: none;                      419   list-style: none;                

     390   padding: 2px 10px;                     420   padding: 2px 10px;               

     391   cursor: default;                       421   cursor: default;                 

     392   text-align: left;                      422   text-align: left;                

                                                  423   overflow: hidden;                

     393                                          424                                    

     394   &.disabled {                           425   &.disabled {                     

     395     pointer-events: none;                426     pointer-events: none;          

     396     opacity: 0.5;                        427     opacity: 0.5;                  

     397   }                                      428   }                                

---                                          ---                                         

     399   &:hover, &.active {                    430   &:hover, &.active {              

     400     background: rgba(0, 0, 0, .05);      431     background: rgba(0, 0, 0, .05);

     401   }                                      432   }                                

     402                                          433                                    

     403   // &.active {                          434   // &.active {                    

     404   ////   background: #89aef53d;          435     ////   background: #89aef53d;  

     405   // }                                   436   // }                             

     406                                          437                                    

     407   &.divider {                            438   &.divider {                      

     408     height: 0;                           439     height: 0;                     

     409     padding: 0;                          440     padding: 0;                    

---                                          ---                                         

     460   }                                      491   }                                

     461                                          492                                    

     462 }                                        493 }                                  

     463                                          494                                    

     464 .@{css-prefix}-checkbox {                495 .@{css-prefix}-checkbox {          

     465     position: relative;                  496   position: relative;              

     466     display: inline-block;               497   display: inline-block;           

     467     backface-visibility: hidden;         498   backface-visibility: hidden;     

                                                  499   outline: 0;                      

                                                  500   vertical-align: baseline;        

                                                  501   font-style: normal;              

                                                  502   font-size: 1rem;                 

                                                  503   line-height: 1em;                

                                                  504   > input {                        

                                                  505     position: absolute;            

                                                  506     top: 0;                        

                                                  507     left: 0;                       

                                                  508     opacity: 0!important;          

     468     outline: 0;                          509     outline: 0;                    

     469     vertical-align: baseline;                                                   

     470     font-style: normal;                                                         

     471     font-size: 1rem;                                                            

     472     line-height: 1em;                                                           

     473     > input {                                                                   

     474       position: absolute;                                                       

     475       top: 0;                                                                   

     476       left: 0;                                                                  

     477       opacity: 0!important;                                                     

     478       outline: 0;                                                               

     479       z-index: -1;                       510     z-index: -1;                   

     480     }                                    511   }                                

     481 }                                        512 }                                  

     482                                          513                                    

     483 .@{css-prefix}-suggest,                  514 .@{css-prefix}-suggest,            

     484 .@{css-prefix}-contextmenu,              515 .@{css-prefix}-contextmenu,        

     485 .@{css-prefix}-sort-filter {             516 .@{css-prefix}-sort-filter {       

---                                          ---                                         

     531   background: #f5f6f7;                   562   background: #f5f6f7;             

     532   display: flex;                         563   display: flex;                   

     533 }                                        564 }                                  

     534                                          565                                    

     535 .@{css-prefix}-bottombar {               566 .@{css-prefix}-bottombar {         

                                                  567   position: relative;              

     536   border-top: 1px solid #e0e2e4;         568   border-top: 1px solid #e0e2e4;   

                                                  569                                    

                                                  570   .@{css-prefix}-menu > li {       

                                                  571     line-height: 40px;             

                                                  572     height: 40px;                  

                                                  573     padding-top: 0;                

                                                  574     padding-bottom: 0;             

                                                  575     vertical-align: middle;        

                                                  576     border-right: 1px solid #e8eaed

                                             ;                                           

                                                  577   }                                

                                                  578 }                                  

                                                  579                                    

                                                  580 .@{css-prefix}-menu {              

                                                  581   list-style: none;                

                                                  582   margin: 0;                       

                                                  583   padding: 0;                      

                                                  584   user-select: none;               

                                                  585 }                                  

                                                  586 .@{css-prefix}-menu > li {         

                                                  587   float: left;                     

                                                  588   line-height: 1.25em;             

                                                  589   padding: .785em 1em;             

                                                  590   margin: 0;                       

                                                  591   vertical-align: middle;          

                                                  592   text-align: left;                

                                                  593   font-weight: 400;                

                                                  594   color: #80868b;                  

                                                  595   white-space: nowrap;             

                                                  596   cursor: pointer;                 

                                                  597   transition: all .3s;             

                                                  598   font-weight: bold;               

                                                  599                                    

                                                  600   &.active {                       

                                                  601     background-color: #fff;        

                                                  602     color: rgba(0, 0, 0, .65);     

                                                  603   }                                

                                                  604                                    

                                                  605   .@{css-prefix}-icon {            

                                                  606     margin: 0 6px;                 

                                                  607                                    

                                                  608     .@{css-prefix}-icon-img {      

                                                  609       &:hover {                    

                                                  610         opacity: .85;              

                                                  611       }                            

                                                  612     }                              

                                                  613   }                                

                                                  614                                    

                                                  615   .@{css-prefix}-dropdown {        

                                                  616     display: inline-block;         

                                                  617   }                                

     537 }                                        618 }                                  

     538                                          619                                    

     539 .@{css-prefix}-toolbar {                 620 .@{css-prefix}-toolbar {           

     540   border-bottom: 1px solid #e0e2e4;      621   border-bottom: 1px solid #e0e2e4;

     541                                          622                                    

---                                          ---                                         

     581   vertical-align: middle;                662   vertical-align: middle;          

     582   height: 18px;                          663   height: 18px;                    

     583   margin: 12px 3px 0;                    664   margin: 12px 3px 0;              

     584 }                                        665 }                                  

     585                                          666                                    

                                                  667 .@{css-prefix}-print {             

                                                  668   position: absolute;              

                                                  669   left: 0;                         

                                                  670   top: 0;                          

                                                  671   z-index: 100;                    

                                                  672   width: 100%;                     

                                                  673   height: 100%;                    

                                                  674   display: flex;                   

                                                  675   flex-direction: column;          

                                                  676 }                                  

                                                  677 .@{css-prefix}-print-bar {         

                                                  678   background: #424242;             

                                                  679   height: 60px;                    

                                                  680   line-height: 60px;               

                                                  681   padding: 0 30px;                 

                                                  682                                    

                                                  683   .-title {                        

                                                  684     color: #fff;                   

                                                  685     font-weight: bold;             

                                                  686     font-size: 1.2em;              

                                                  687     float: left;                   

                                                  688   }                                

                                                  689                                    

                                                  690   .-right {                        

                                                  691     float: right;                  

                                                  692     margin-top: 12px;              

                                                  693   }                                

                                                  694 }                                  

                                                  695 .@{css-prefix}-print-content {     

                                                  696   display: flex;                   

                                                  697   flex: auto;                      

                                                  698   flex-direction: row;             

                                                  699   background: #d0d0d0;             

                                                  700   height: calc(100% - 60px);       

                                                  701                                    

                                                  702   .-sider {                        

                                                  703     flex: 0 0 300px;               

                                                  704     width: 300px;                  

                                                  705     border-left: 2px solid #ccc;   

                                                  706     background: #fff;              

                                                  707   }                                

                                                  708                                    

                                                  709   .-content {                      

                                                  710     flex: auto;                    

                                                  711     overflow-x: auto;              

                                                  712     overflow-y: scroll;            

                                                  713     height: 100%;                  

                                                  714   }                                

                                                  715 }                                  

                                                  716                                    

                                                  717                                    

                                                  718 .@{css-prefix}-canvas-card-wraper {

                                                  719   margin: 40px 20px;               

                                                  720 }                                  

                                                  721 .@{css-prefix}-canvas-card {       

                                                  722   background: #fff;                

                                                  723   margin: auto;                    

                                                  724   page-break-before: auto;         

                                                  725   page-break-after: always;        

                                                  726   box-shadow: 0 8px 10px 1px rgba(0

                                             ,0,0,0.14), 0 3px 14px 3px rgba(0,0         

                                             ,0,0.12), 0 4px 5px 0 rgba(0,0,0,0.         

                                             20);                                        

                                                  727 }                                  

                                                  728                                    

     586 .@{css-prefix}-calendar {                729 .@{css-prefix}-calendar {          

     587   color: rgba(0,0,0,.65);                730   color: rgba(0,0,0,.65);          

     588   background: #ffffff;                   731   background: #ffffff;             

     589   user-select: none;                     732   user-select: none;               

     590                                          733                                    

     591   .calendar-header {                     734   .calendar-header {               

     592     font-weight: 700;                    735     font-weight: 700;              

     593     line-height: 30px;                   736     line-height: 30px;             

     594     text-align: center;                  737     text-align: center;            

     595     width: 100%;                         738     width: 100%;                   

---                                          ---                                         

     601       float: left;                       744       float: left;                 

     602     }                                    745     }                              

     603                                          746                                    

     604     .calendar-header-right {             747     .calendar-header-right {       

     605       float: right;                      748       float: right;                

     606                                          749                                    

     607       a {                                750       a {                          

     608         padding: 3px 0;                  751         padding: 3px 0;            

     609         margin-right: 2px;               752         margin-right: 2px;         

     610         border-radius: 2px;              753         border-radius: 2px;        

     611       }                                  754       }                            

     612       a:hover {                          755       a:hover {                    

     613         background: rgba(0,0,0,.08)      756         background: rgba(0,0,0,.08)

;                                            ;                                           

     614       }                                  757       }                            

     615     }                                    758     }                              

     616   }                                      759   }                                

     617                                          760                                    

     618   .calendar-body {                       761   .calendar-body {                 

     619     border-collapse: collapse;           762     border-collapse: collapse;     

     620     border-spacing: 0;                   763     border-spacing: 0;             

     621                                          764                                    

     622     th, td {                             765     th, td {                       

     623       width: 100%/7;                     766       width: 100%/7;               

     624       min-width: 32px;                   767       min-width: 32px;             

     625       text-align: center;                768       text-align: center;          

     626       font-weight: 700;                  769       font-weight: 700;            

     627       line-height: 30px;                 770       line-height: 30px;           

     628       padding: 0;                        771       padding: 0;                  

     629     }                                    772     }                              

     630                                          773                                    

     631     td > .cell {                         774     td > .cell {                   

     632       // border: 1px solid rgba(0,0      775       // border: 1px solid rgba(0,0

,0,.05);                                     ,0,.05);                                    

     633                                          776                                    

     634       &:hover {                          777       &:hover {                    

     635         background: #ecf6fd;             778         background: #ecf6fd;       

     636       }                                  779       }                            

     637                                          780                                    

     638       &.active, &.active:hover {         781       &.active, &.active:hover {   

     639         background: #ecf6fd;             782         background: #ecf6fd;       

     640         color: #2185D0;                  783         color: #2185D0;            

     641       }                                  784       }                            

     642                                          785                                    

     643       &.disabled {                       786       &.disabled {                 

     644         pointer-events: none;            787         pointer-events: none;      

     645         opacity: 0.5;                    788         opacity: 0.5;              

     646       }                                  789       }                            

     647     }                                    790     }                              

     648   }                                      791   }                                

     649 }                                        792 }                                  

     650                                          793                                    

     651 .@{css-prefix}-datepicker {              794 .@{css-prefix}-datepicker {        

     652     box-shadow: 2px 2px 5px rgba(0,      795   box-shadow: 2px 2px 5px rgba(0,0,

0,0,.2);                                     0,.2);                                      

     653     position: absolute;                  796   position: absolute;              

     654     left: 0;                             797   left: 0;                         

     655     top: calc(100% + 5px);               798   top: calc(100% + 5px);           

     656     z-index: 10;                         799   z-index: 10;                     

     657     width: auto;                         800   width: auto;                     

     658 }                                        801 }                                  

     659                                          802                                    

     660 .@{css-prefix}-buttons {                 803 .@{css-prefix}-buttons {           

     661   display: flex;                         804   display: flex;                   

     662   justify-content: flex-end;             805   justify-content: flex-end;       

---                                          ---                                         

     703   font-size: 1em;                        846   font-size: 1em;                  

     704   position: relative;                    847   position: relative;              

     705   font-weight: 400;                      848   font-weight: 400;                

     706   display: inline-flex;                  849   display: inline-flex;            

     707   color: rgba(0,0,0,.87);                850   color: rgba(0,0,0,.87);          

     708                                          851                                    

     709   input {                                852   input {                          

     710     z-index: 1;                          853     z-index: 1;                    

     711     margin: 0;                           854     margin: 0;                     

     712     max-width: 100%;                     855     max-width: 100%;               

     713     flex: 1 0 auto;                      856     flex: 1 0 auto;                

---                                          ---                                         

     809     display: block;                      952     display: block;                

     810     opacity: 1;                          953     opacity: 1;                    

     811   }                                      954   }                                

     812 }                                        955 }                                  

     813                                          956                                    

                                                  957 form fieldset {                    

                                                  958   border: none;                    

                                                  959                                    

                                                  960   label {                          

                                                  961     display: block;                

                                                  962     margin-bottom: .5em;           

                                                  963     font-size: 1em;                

                                                  964     color: #666;                   

                                                  965   }                                

                                                  966                                    

                                                  967   select {                         

                                                  968     font-size: 1.1em;              

                                                  969     width: 100%;                   

                                                  970     background-color: #fff;        

                                                  971     border: none;                  

                                                  972     border-bottom: 2px solid #ddd; 

                                                  973     padding: .5em .85em;           

                                                  974     border-radius: 2px;            

                                                  975   }                                

                                                  976 }                                  

                                                  977                                    

     814 .@{css-prefix}-modal, .@{css-prefix      978 .@{css-prefix}-modal, .@{css-prefix

}-toast {                                    }-toast {                                   

     815   font-size: 13px;                       979   font-size: 13px;                 

     816   position: fixed;                       980   position: fixed;                 

     817   z-index: 1001;                         981   z-index: 1001;                   

     818   text-align: left;                      982   text-align: left;                

---                                          ---                                         

     841   .@{css-prefix}-icon {                 1005   .@{css-prefix}-icon {            

     842     position: absolute;                 1006     position: absolute;            

     843     right: .8em;                        1007     right: .8em;                   

     844     top: .65em;                         1008     top: .65em;                    

     845     border-radius: 18px;                1009     border-radius: 18px;           

     846                                         1010                                    

     847     &:hover {                           1011     &:hover {                      

     848       opacity: 1;                       1012       opacity: 1;                  

     849       background: rgba(0, 0, 0, 0.0     1013       background: rgba(0, 0, 0, 0.0

8);                                          8);                                         

     850     }                                   1014     }                              

     851   }                                     1015   }                                

---                                          ---                                         

     884   overflow: hidden;                     1048   overflow: hidden;                

     885   position: relative;                   1049   position: relative;              

     886   display: inline-block;                1050   display: inline-block;           

     887                                         1051                                    

     888   .@{css-prefix}-icon-img {             1052   .@{css-prefix}-icon-img {        

     889     background-image: url('../asset     1053     background-image: url('../asset

s/sprite3.svg');                             s/sprite.svg');                             

     890     position: absolute;                 1054     position: absolute;            

     891     width: 262px;                       1055     width: 262px;                  

     892     height: 444px;                      1056     height: 444px;                 

     893     opacity: 0.56;                      1057     opacity: 0.56;                 

     894                                         1058                                    

---                                          ---                                         

     910     }                                   1074     }                              

     911     &.clearformat {                     1075     &.clearformat {                

     912       left: -4 * @icon-size;            1076       left: -4 * @icon-size;       

     913       top: 0;                           1077       top: 0;                      

     914     }                                   1078     }                              

     915     &.bold {                            1079     &.font-bold {                  

     916       left: -5 * @icon-size;            1080       left: -5 * @icon-size;       

     917       top: 0;                           1081       top: 0;                      

     918     }                                   1082     }                              

     919     &.italic {                          1083     &.font-italic {                

     920       left: -6 * @icon-size;            1084       left: -6 * @icon-size;       

     921       top: 0;                           1085       top: 0;                      

     922     }                                   1086     }                              

     923     &.underline {                       1087     &.underline {                  

     924       left: -7 * @icon-size;            1088       left: -7 * @icon-size;       

---                                          ---                                         

     926     }                                   1090     }                              

     927     &.strike {                          1091     &.strike {                     

     928       left: -8 * @icon-size;            1092       left: -8 * @icon-size;       

     929       top: 0;                           1093       top: 0;                      

     930     }                                   1094     }                              

     931     &.text-color {                      1095     &.color {                      

     932       left: -9 * @icon-size;            1096       left: -9 * @icon-size;       

     933       top: 0;                           1097       top: 0;                      

     934     }                                   1098     }                              

     935     &.fill-color {                      1099     &.bgcolor {                    

     936       left: -10 * @icon-size;           1100       left: -10 * @icon-size;      

     937       top: 0;                           1101       top: 0;                      

     938     }                                   1102     }                              

     939     &.merge {                           1103     &.merge {                      

     940       left: -11 * @icon-size;           1104       left: -11 * @icon-size;      

---                                          ---                                         

    1070     }                                   1234     }                              

    1071     &.chevron-right {                   1235     &.chevron-right {              

    1072       left: -3 * @icon-size;            1236       left: -3 * @icon-size;       

    1073       top: -3 * @icon-size;             1237       top: -3 * @icon-size;        

    1074     }                                   1238     }                              

    1075     &.overlayer {                                                               

    1076       left: -6 * @icon-size;                                                    

    1077       top: -3 * @icon-size;                                                     

    1078     }                                   1239   }                                

    1079   }                                                                             

    1080 }                                       1240 }                                  

```

##  ../src/algorithm/bitmap.js  ->  ../../x-spreadsheet/src/algorithm/bitmap.js  
```
```

##  ../src/algorithm/expression.js  ->  ../../x-spreadsheet/src/algorithm/expression.js  
```
```

##  ../src/canvas/draw.js  ->  ../../x-spreadsheet/src/canvas/draw.js  
```
../src/canvas/draw.js                        ../../x-spreadsheet/src/canvas/draw.js      

      39     if (bottom) this.borderBottom =       39     if (bottom) this.borderBottom =

 bottom;                                      bottom;                                    

      40     if (left) this.borderLeft = lef       40     if (left) this.borderLeft = lef

t;                                           t;                                          

      41   }                                       41   }                                

      42                                           42                                    

      43   innerWidth() {                          43   innerWidth() {                   

      44     return this.width - (this.paddi       44     return this.width - (this.paddi

ng * 2);                                     ng * 2) - 2;                                

      45   }                                       45   }                                

      46                                           46                                    

      47   innerHeight() {                         47   innerHeight() {                  

      48     return this.height - (this.padd       48     return this.height - (this.padd

ing * 2);                                    ing * 2) - 2;                               

      49   }                                       49   }                                

      50                                           50                                    

      51   textx(align) {                          51   textx(align) {                   

      52     const { width, padding } = this       52     const { width, padding } = this

;                                            ;                                           

      53     let { x } = this;                     53     let { x } = this;              

---                                          ---                                         

      59       x += width - padding;               59       x += width - padding;        

      60     }                                     60     }                              

      61     return x;                             61     return x;                      

      62   }                                       62   }                                

      63                                           63                                    

      64   texty(align, fontSize, hoffset) {       64   texty(align, h) {                

      65     const { height, padding } = thi       65     const { height, padding } = thi

s;                                           s;                                          

      66     let { y } = this;                     66     let { y } = this;              

      67     if (align === 'top') {                67     if (align === 'top') {         

      68       y += padding;                       68       y += padding;                

      69     } else if (align === 'middle')        69     } else if (align === 'middle') 

{                                            {                                           

      70       y = y + height / 2 - hoffset;       70       y += height / 2 - h / 2;     

      71       // y = y1;                                                                

      72       // const y2 = y + padding + f                                             

ontSize / 2 + 1;                                                                         

      73       // if (y1 < y2) y = y2;                                                   

      74       // else y = y1;                                                           

      75     } else if (align === 'bottom')        71     } else if (align === 'bottom') 

{                                            {                                           

      76       y += height - hoffset * 2 - p       72       y += height - padding - h;   

adding;                                                                                  

      77     }                                     73     }                              

      78     return y;                             74     return y;                      

      79   }                                       75   }                                

      80                                           76                                    

      81   topxys() {                              77   topxys() {                       

---                                          ---                                         

     212         italic: false,                   208         italic: false,             

     213       }                                  209       }                            

     214     }                                    210     }                              

     215     textWrap: text wrapping              211     textWrap: text wrapping        

     216   */                                     212   */                               

     217   text(txt, box, attr = {}, textWra      213   text(mtxt, box, attr = {}, textWr

p = true) {                                  ap = true) {                                

     218     const { ctx } = this;                214     const { ctx } = this;          

     219     const {                              215     const {                        

     220       align, valign, font, color, s      216       align, valign, font, color, s

trike, underline,                            trike, underline,                           

     221     } = attr;                            217     } = attr;                      

     222     const tx = box.textx(align);         218     const tx = box.textx(align);   

---                                          ---                                         

     227       textBaseline: valign,              223       textBaseline: valign,        

     228       font: `${font.italic ? 'itali      224       font: `${font.italic ? 'itali

c' : ''} ${font.bold ? 'bold' : ''}          c' : ''} ${font.bold ? 'bold' : ''}         

 ${npx(font.size)}px ${font.name}`,           ${npx(font.size)}px ${font.name}`,         

     229       fillStyle: color,                  225       fillStyle: color,            

     230       strokeStyle: color,                226       strokeStyle: color,          

     231     });                                  227     });                            

                                                  228     const txts = `${mtxt}`.split('\

                                             n');                                        

                                                  229     const biw = box.innerWidth();  

                                                  230     const ntxts = [];              

                                                  231     txts.forEach((it) => {         

     232     const txtWidth = ctx.measureTex      232       const txtWidth = ctx.measureT

t(txt).width;                                ext(it).width;                              

     233     let hoffset = 0;                                                            

     234     if (textWrap) {                                                             

     235       const n = Math.ceil(txtWidth                                              

/ box.innerWidth());                                                                     

     236       hoffset = ((n - 1) * font.siz                                             

e) / 2;                                                                                  

     237     }                                                                           

     238     let ty = box.texty(valign, font                                             

.size, hoffset);                                                                         

     239     // console.log('tx: ', tx, ', t                                             

y:', ty);                                                                                

     240 /*                                                                              

     241     if (textWrap && txtWidth > box.      233       if (textWrap && txtWidth > bi

innerWidth()) {                              w) {                                        

     242       const textLine = { len: 0, st      234         let textLine = { w: 0, len:

art: 0 };                                     0, start: 0 };                             

     243       for (let i = 0; i < txt.lengt      235         for (let i = 0; i < it.leng

h; i += 1) {                                 th; i += 1) {                               

     244         if (textLine.len >= box.inn      236           if (textLine.w >= biw) { 

erWidth()) {                                                                             

     245           this.fillText(txt.substri      237             ntxts.push(it.substr(te

ng(textLine.start, i), tx, ty);              xtLine.start, textLine.len));               

     246           if (strike) {                  238             textLine = { w: 0, len:

                                              0, start: i };                             

     247             drawFontLine.call(this,                                             

 'strike', tx, ty, align, valign, f                                                      

ont.size, textLine.len);                                                                 

     248           }                              239           }                        

     249           if (underline) {                                                      

     250             drawFontLine.call(this,                                             

 'underline', tx, ty, align, valign                                                      

, font.size, textLine.len);                                                              

     251           }                                                                     

     252           ty += font.size + 2;                                                  

     253           textLine.len = 0;              240           textLine.len += 1;       

     254           textLine.start = i;            241           textLine.w += ctx.measure

                                             Text(it[i]).width + 1;                      

     255         }                                242         }                          

     256         textLine.len += ctx.measure                                             

Text(txt[i]).width;                                                                      

     257       }                                                                         

     258       if (textLine.len > 0) {            243         if (textLine.len > 0) {    

     259         this.fillText(txt.substring      244           ntxts.push(it.substr(text

(textLine.start), tx, ty);                   Line.start, textLine.len));                 

     260         if (strike) {                                                           

     261           drawFontLine.call(this, '                                             

strike', tx, ty, align, valign, fon                                                      

t.size, textLine.len);                                                                   

     262         }                                245         }                          

     263         if (underline) {                                                        

     264           drawFontLine.call(this, '                                             

underline', tx, ty, align, valign,                                                       

font.size, textLine.len);                                                                

     265         }                                                                       

     266       }                                                                         

     267 */                                                                              

     268 //    } else if ( txtWidth > box.in                                             

nerWidth()){                                                                             

     269 //     } else {                                                                 

     270       const textLine = { len: 0, st                                             

art: 0 };                                                                                

     271 //      console.log(txt);                                                       

     272       for (let i = 0; i < txt.lengt                                             

h; i += 1) {                                                                             

     273         //console.log(txt.substring                                             

(textLine.start, i));                                                                    

     274         //console.log(txt.substr(te                                             

xtLine.start+i, 1));                                                                     

     275         //if (txt.substr(textLine.s                                             

tart+i, 1) == 'R') {                                                                     

     276          let x = i - textLine.start                                             

;                                                                                        

     277 //        console.log("+ ",txt.subs                                             

tr(textLine.start+x, 1));                                                                

     278         if (txt.substr(textLine.sta                                             

rt+x, 1) == '\n') {                                                                      

     279           this.fillText(txt.substri                                             

ng(textLine.start, i), tx, ty);                                                          

     280           if (strike) {                                                         

     281             drawFontLine.call(this,                                             

 'strike', tx, ty, align, valign, f                                                      

ont.size, textLine.len);                                                                 

     282           }                                                                     

     283           if (underline) {                                                      

     284             drawFontLine.call(this,                                             

 'underline', tx, ty, align, valign                                                      

, font.size, textLine.len);                                                              

     285           }                                                                     

     286           ty += font.size + 2; // n                                             

ext line                                                                                 

     287           textLine.len = 0;                                                     

     288           i++;                 // \                                             

n skip                                                                                   

     289           textLine.start = i;                                                   

     290          /*else if (textLine.len >=                                             

 box.innerWidth()) {                                                                     

     291           this.fillText(txt.substri                                             

ng(textLine.start, i), tx, ty);                                                          

     292           if (strike) {                                                         

     293             drawFontLine.call(this,                                             

 'strike', tx, ty, align, valign, f                                                      

ont.size, textLine.len);                                                                 

     294           }                                                                     

     295           if (underline) {                                                      

     296             drawFontLine.call(this,                                             

 'underline', tx, ty, align, valign                                                      

, font.size, textLine.len);                                                              

     297           }                                                                     

     298           ty += font.size + 2;                                                  

     299           textLine.len = 0;                                                     

     300           textLine.start = i;                                                   

     301         }*/                                                                     

     302         }else{                                                                  

     303         textLine.len += ctx.measure                                             

Text(txt[i]).width;                                                                      

     304         }                                                                       

     305       } //for                                                                   

     306                                                                                 

     307       if (textLine.len > 0) {                                                   

     308 //        console.log(">>",txt.subs                                             

tring(textLine.start));                                                                  

     309           this.fillText(txt.substri                                             

ng(textLine.start), tx, ty);                                                             

     310           if (strike) {                                                         

     311             drawFontLine.call(this,                                             

 'strike', tx, ty, align, valign, f                                                      

ont.size, textLine.len);                                                                 

     312           }                                                                     

     313           if (underline) {                                                      

     314             drawFontLine.call(this,                                             

 'underline', tx, ty, align, valign                                                      

, font.size, textLine.len);                                                              

     315           }                                                                     

     316         }                                                                       

     317                                                                                 

     318  //     }                                                                       

     319                                                                                 

     320 /*                                                                              

     321     } else {                             246       } else {                     

                                                  247         ntxts.push(it);            

                                                  248       }                            

                                                  249     });                            

                                                  250     const txtHeight = (ntxts.length

                                              - 1) * (font.size + 2);                    

                                                  251     let ty = box.texty(valign, txtH

                                             eight);                                     

                                                  252     ntxts.forEach((txt) => {       

                                                  253       const txtWidth = ctx.measureT

                                             ext(txt).width;                             

     322       this.fillText(txt, tx, ty);        254       this.fillText(txt, tx, ty);  

     323       if (strike) {                      255       if (strike) {                

     324         drawFontLine.call(this, 'st      256         drawFontLine.call(this, 'st

riket', tx, ty, align, valign, font          rike', tx, ty, align, valign, font.         

.size, txtWidth);                            size, txtWidth);                            

     325       }                                  257       }                            

     326       if (underline) {                   258       if (underline) {             

     327         drawFontLine.call(this, 'un      259         drawFontLine.call(this, 'un

derline', tx, ty, align, valign, fo          derline', tx, ty, align, valign, fo         

nt.size, txtWidth);                          nt.size, txtWidth);                         

     328       }                                  260       }                            

     329 */                                       261       ty += font.size + 2;         

     330 //    }                                  262     });                            

     331     ctx.restore();                       263     ctx.restore();                 

     332     return this;                         264     return this;                   

     333   }                                      265   }                                

     334                                          266                                    

     335   border(style, color) {                 267   border(style, color) {           

---                                          ---                                         

     424     ctx.fillStyle = 'rgba(255, 0, 0      356     ctx.fillStyle = 'rgba(255, 0, 0

, .65)';                                     , .65)';                                    

     425     ctx.fill();                          357     ctx.fill();                    

     426     ctx.restore();                       358     ctx.restore();                 

     427   }                                      359   }                                

     428                                          360                                    

                                                  361   frozen(box) {                    

                                                  362     const { ctx } = this;          

                                                  363     const { x, y, width } = box;   

                                                  364     const sx = x + width - 1;      

                                                  365     ctx.save();                    

                                                  366     ctx.beginPath();               

                                                  367     ctx.moveTo(npx(sx - 8), npx(y -

                                              1));                                       

                                                  368     ctx.lineTo(npx(sx), npx(y - 1))

                                             ;                                           

                                                  369     ctx.lineTo(npx(sx), npx(y + 8))

                                             ;                                           

                                                  370     ctx.closePath();               

                                                  371     ctx.fillStyle = 'rgba(0, 255, 0

                                             , .85)';                                    

                                                  372     ctx.fill();                    

                                                  373     ctx.restore();                 

                                                  374   }                                

                                                  375                                    

     429   rect(box, dtextcb) {                   376   rect(box, dtextcb) {             

     430     const { ctx } = this;                377     const { ctx } = this;          

     431     const {                              378     const {                        

     432       x, y, width, height, bgcolor,      379       x, y, width, height, bgcolor,

     433     } = box;                             380     } = box;                       

```

##  ../src/canvas/draw2.js  ->  ../../x-spreadsheet/src/canvas/draw2.js  
```
```

##  ../src/component/border_palette.js  ->  ../../x-spreadsheet/src/component/border_palette.js  
```
```

##  ../src/component/bottombar.js  ->  ../../x-spreadsheet/src/component/bottombar.js  
```
../src/component/bottombar.js                ../../x-spreadsheet/src/component/bottombar.js

       1 import { h } from './element';             1 import { h } from './element';     

                                                    2 import { bindClickoutside, unbindCl

                                             ickoutside } from './event';                

       2 import { cssPrefix } from '../confi        3 import { cssPrefix } from '../confi

g';                                          g';                                         

                                                    4 import Icon from './icon';         

                                                    5 import FormInput from './form_input

                                             ';                                          

                                                    6 import Dropdown from './dropdown'; 

                                                    7 import { xtoast } from './message';

                                                    8 import { tf } from '../locale/local

                                             e';                                         

                                                    9                                    

                                                   10 class DropdownMore extends Dropdown

                                              {                                          

                                                   11   constructor(click) {             

                                                   12     const icon = new Icon('ellipsis

                                             ');                                         

                                                   13     super(icon, 'auto', false, 'top

                                             -left');                                    

                                                   14     this.contentClick = click;     

                                                   15   }                                

                                                   16                                    

                                                   17   reset(items) {                   

                                                   18     const eles = items.map((it, i) 

                                             => h('div', `${cssPrefix}-item`)            

                                                   19       .css('width', '150px')       

                                                   20       .css('font-weight', 'normal')

                                                   21       .on('click', () => {         

                                                   22         this.contentClick(i);      

                                                   23         this.hide();               

                                                   24       })                           

                                                   25       .child(it));                 

                                                   26     this.setContentChildren(...eles

                                             );                                          

                                                   27   }                                

                                                   28                                    

                                                   29   setTitle() {}                    

                                                   30 }                                  

                                                   31                                    

                                                   32 const menuItems = [                

                                                   33   { key: 'delete', title: tf('conte

                                             xtmenu.deleteSheet') },                     

                                                   34 ];                                 

                                                   35                                    

                                                   36 function buildMenuItem(item) {     

                                                   37   return h('div', `${cssPrefix}-ite

                                             m`)                                         

                                                   38     .child(item.title())           

                                                   39     .on('click', () => {           

                                                   40       this.itemClick(item.key);    

                                                   41       this.hide();                 

                                                   42     });                            

                                                   43 }                                  

                                                   44                                    

                                                   45 function buildMenu() {             

                                                   46   return menuItems.map(it => buildM

                                             enuItem.call(this, it));                    

                                                   47 }                                  

                                                   48                                    

                                                   49 class ContextMenu {                

                                                   50   constructor() {                  

                                                   51     this.el = h('div', `${cssPrefix

                                             }-contextmenu`)                             

                                                   52       .css('width', '160px')       

                                                   53       .children(...buildMenu.call(t

                                             his))                                       

                                                   54       .hide();                     

                                                   55     this.itemClick = () => {};     

                                                   56   }                                

                                                   57                                    

                                                   58   hide() {                         

                                                   59     const { el } = this;           

                                                   60     el.hide();                     

                                                   61     unbindClickoutside(el);        

                                                   62   }                                

                                                   63                                    

                                                   64   setOffset(offset) {              

                                                   65     const { el } = this;           

                                                   66     el.offset(offset);             

                                                   67     el.show();                     

                                                   68     bindClickoutside(el);          

                                                   69   }                                

                                                   70 }                                  

       3                                           71                                    

       4 export default class Bottombar {          72 export default class Bottombar {   

       5   constructor(datas) {                    73   constructor(addFunc = () => {},  

                                                   74     swapFunc = () => {},           

                                                   75     deleteFunc = () => {},         

                                                   76     updateFunc = () => {}) {       

                                                   77     this.swapFunc = swapFunc;      

                                                   78     this.updateFunc = updateFunc;  

       6     this.datas = datas;                   79     this.dataNames = [];           

                                                   80     this.activeEl = null;          

                                                   81     this.deleteEl = null;          

                                                   82     this.items = [];               

                                                   83     this.moreEl = new DropdownMore(

                                             (i) => {                                    

                                                   84       this.clickSwap2(this.items[i]

                                             );                                          

                                                   85     });                            

                                                   86     this.contextMenu = new ContextM

                                             enu();                                      

                                                   87     this.contextMenu.itemClick = de

                                             leteFunc;                                   

       7     this.el = h('div', `${cssPrefix       88     this.el = h('div', `${cssPrefix

}-bottombar`);                               }-bottombar`).children(                     

                                                   89       this.contextMenu.el,         

                                                   90       this.menuEl = h('ul', `${cssP

                                             refix}-menu`).child(                        

                                                   91         h('li', '').children(      

                                                   92           new Icon('add').on('click

                                             ', () => {                                  

                                                   93             if (this.dataNames.leng

                                             th < 10) {                                  

                                                   94               addFunc();           

                                                   95             } else {               

                                                   96               xtoast('tip', 'it les

                                             s than or equal to 10');                    

                                                   97             }                      

                                                   98           }),                      

                                                   99           h('span', '').child(this.

                                             moreEl),                                    

                                                  100         ),                         

                                                  101       ),                           

                                                  102     );                             

                                                  103   }                                

                                                  104                                    

                                                  105   addItem(name, active) {          

                                                  106     this.dataNames.push(name);     

                                                  107     const item = h('li', active ? '

                                             active' : '').child(name);                  

                                                  108     item.on('click', () => {       

                                                  109       this.clickSwap2(item);       

                                                  110     }).on('contextmenu', (evt) => {

                                                  111       const { offsetLeft, offsetHei

                                             ght } = evt.target;                         

                                                  112       this.contextMenu.setOffset({ 

                                             left: offsetLeft, bottom: offsetHei         

                                             ght + 1 });                                 

                                                  113       this.deleteEl = item;        

                                                  114     }).on('dblclick', () => {      

                                                  115       const v = item.html();       

                                                  116       const input = new FormInput('

                                             auto', '');                                 

                                                  117       input.val(v);                

                                                  118       input.input.on('blur', ({ tar

                                             get }) => {                                 

                                                  119         const { value } = target;  

                                                  120         const nindex = this.dataNam

                                             es.findIndex(it => it === v);               

                                                  121         this.dataNames.splice(ninde

                                             x, 1, value);                               

                                                  122         this.moreEl.reset(this.data

                                             Names);                                     

                                                  123         item.html('').child(value);

                                                  124         this.updateFunc(nindex, val

                                             ue);                                        

                                                  125       });                          

                                                  126       item.html('').child(input.el)

                                             ;                                           

                                                  127       input.focus();               

                                                  128     });                            

                                                  129     if (active) {                  

                                                  130       this.clickSwap(item);        

                                                  131     }                              

                                                  132     this.items.push(item);         

                                                  133     this.menuEl.child(item);       

                                                  134     this.moreEl.reset(this.dataName

                                             s);                                         

                                                  135   }                                

                                                  136                                    

                                                  137   deleteItem() {                   

                                                  138     const { activeEl, deleteEl } = 

                                             this;                                       

                                                  139     if (this.items.length > 1) {   

                                                  140       const index = this.items.find

                                             Index(it => it === deleteEl);               

                                                  141       this.items.splice(index, 1); 

                                                  142       this.dataNames.splice(index, 

                                             1);                                         

                                                  143       this.menuEl.removeChild(delet

                                             eEl.el);                                    

                                                  144       this.moreEl.reset(this.dataNa

                                             mes);                                       

                                                  145       if (activeEl === deleteEl) { 

                                                  146         const [f] = this.items;    

                                                  147         this.activeEl = f;         

                                                  148         this.activeEl.toggle();    

                                                  149         return [index, 0];         

                                                  150       }                            

                                                  151       return [index, -1];          

                                                  152     }                              

                                                  153     return [-1];                   

                                                  154   }                                

                                                  155                                    

                                                  156   clickSwap2(item) {               

                                                  157     const index = this.items.findIn

                                             dex(it => it === item);                     

                                                  158     this.clickSwap(item);          

                                                  159     this.activeEl.toggle();        

                                                  160     this.swapFunc(index);          

                                                  161   }                                

                                                  162                                    

                                                  163   clickSwap(item) {                

                                                  164     if (this.activeEl !== null) {  

                                                  165       this.activeEl.toggle();      

                                                  166     }                              

                                                  167     this.activeEl = item;          

       8   }                                      168   }                                

       9 }                                        169 }                                  

```

##  ../src/component/button.js  ->  ../../x-spreadsheet/src/component/button.js  
```
```

##  ../src/component/calendar.js  ->  ../../x-spreadsheet/src/component/calendar.js  
```
```

##  ../src/component/color_palette.js  ->  ../../x-spreadsheet/src/component/color_palette.js  
```
```

##  ../src/component/contextmenu.js  ->  ../../x-spreadsheet/src/component/contextmenu.js  
```
../src/component/contextmenu.js              ../../x-spreadsheet/src/component/contextmenu.js

      14   { key: 'insert-column', title: tf       14   { key: 'insert-column', title: tf

('contextmenu.insertColumn') },              ('contextmenu.insertColumn') },             

      15   { key: 'divider' },                     15   { key: 'divider' },              

      16   { key: 'delete-row', title: tf('c       16   { key: 'delete-row', title: tf('c

ontextmenu.deleteRow') },                    ontextmenu.deleteRow') },                   

      17   { key: 'delete-column', title: tf       17   { key: 'delete-column', title: tf

('contextmenu.deleteColumn') },              ('contextmenu.deleteColumn') },             

      18   { key: 'delete-cell-text', title:       18   { key: 'delete-cell-text', title:

 tf('contextmenu.deleteCellText') }           tf('contextmenu.deleteCellText') }         

,                                            ,                                           

                                                   19   { key: 'hide', title: tf('context

                                             menu.hide') },                              

      19   { key: 'divider' },                     20   { key: 'divider' },              

      20   { key: 'validation', title: tf('c       21   { key: 'validation', title: tf('c

ontextmenu.validation') },                   ontextmenu.validation') },                  

                                                   22   { key: 'divider' },              

                                                   23   { key: 'cell-printable', title: t

                                             f('contextmenu.cellprintable') },           

                                                   24   { key: 'cell-non-printable', titl

                                             e: tf('contextmenu.cellnonprintable         

                                             ') },                                       

                                                   25   { key: 'divider' },              

                                                   26   { key: 'cell-editable', title: tf

                                             ('contextmenu.celleditable') },             

                                                   27   { key: 'cell-non-editable', title

                                             : tf('contextmenu.cellnoneditable')         

                                              },                                         

      21 ];                                        28 ];                                 

      22                                           29                                    

      23 function buildMenuItem(item) {            30 function buildMenuItem(item) {     

      24   if (item.key === 'divider') {           31   if (item.key === 'divider') {    

      25     return h('div', `${cssPrefix}-i       32     return h('div', `${cssPrefix}-i

tem divider`);                               tem divider`);                              

---                                          ---                                         

      39   return menuItems.map(it => buildM       46   return menuItems.map(it => buildM

enuItem.call(this, it));                     enuItem.call(this, it));                    

      40 }                                         47 }                                  

      41                                           48                                    

      42 export default class ContextMenu {        49 export default class ContextMenu { 

      43   constructor(viewFn, isHide = fals       50   constructor(viewFn, isHide = fals

e) {                                         e) {                                        

                                                   51     this.menuItems = buildMenu.call

                                             (this);                                     

      44     this.el = h('div', `${cssPrefix       52     this.el = h('div', `${cssPrefix

}-contextmenu`)                              }-contextmenu`)                             

      45       .children(...buildMenu.call(t       53       .children(...this.menuItems) 

his))                                                                                    

      46       .hide();                            54       .hide();                     

      47     this.viewFn = viewFn;                 55     this.viewFn = viewFn;          

      48     this.itemClick = () => {};            56     this.itemClick = () => {};     

      49     this.isHide = isHide;                 57     this.isHide = isHide;          

                                                   58     this.setMode('range');         

                                                   59   }                                

                                                   60                                    

                                                   61   // row-col: the whole rows or the

                                              whole cols                                 

                                                   62   // range: select range           

                                                   63   setMode(mode) {                  

                                                   64     const hideEl = this.menuItems[1

                                             2];                                         

                                                   65     if (mode === 'row-col') {      

                                                   66       hideEl.show();               

                                                   67     } else {                       

                                                   68       hideEl.hide();               

                                                   69     }                              

      50   }                                       70   }                                

      51                                           71                                    

      52   hide() {                                72   hide() {                         

      53     const { el } = this;                  73     const { el } = this;           

      54     el.hide();                            74     el.hide();                     

---                                          ---                                         

      56   }                                       76   }                                

      57                                           77                                    

      58   setPosition(x, y) {                     78   setPosition(x, y) {              

      59     if (this.isHide) return;              79     if (this.isHide) return;       

      60     const { el } = this;                  80     const { el } = this;           

      61     const { height, width } = el.sh       81     const { width } = el.show().off

ow().offset();                               set();                                      

      62     const view = this.viewFn();           82     const view = this.viewFn();    

      63     let top = y;                          83     const vhf = view.height / 2;   

      64     let left = x;                         84     let left = x;                  

      65     if (view.height - y <= height)                                              

{                                                                                        

      66       top -= height;                                                            

      67     }                                                                           

      68     if (view.width - x <= width) {        85     if (view.width - x <= width) { 

      69       left -= width;                      86       left -= width;               

      70     }                                     87     }                              

      71     el.offset({ left, top });             88     el.css('left', `${left}px`);   

                                                   89     if (y > vhf) {                 

                                                   90       el.css('bottom', `${view.heig

                                             ht - y}px`)                                 

                                                   91         .css('max-height', `${y}px`

                                             )                                           

                                                   92         .css('top', 'auto');       

                                                   93     } else {                       

                                                   94       el.css('top', `${y}px`)      

                                                   95         .css('max-height', `${view.

                                             height - y}px`)                             

                                                   96         .css('bottom', 'auto');    

                                                   97     }                              

      72     bindClickoutside(el);                 98     bindClickoutside(el);          

      73   }                                       99   }                                

      74 }                                        100 }                                  

```

##  ../src/component/datepicker.js  ->  ../../x-spreadsheet/src/component/datepicker.js  
```
```

##  ../src/component/dropdown.js  ->  ../../x-spreadsheet/src/component/dropdown.js  
```
../src/component/dropdown.js                 ../../x-spreadsheet/src/component/dropdown.js

       5 export default class Dropdown exten        5 export default class Dropdown exten

ds Element {                                 ds Element {                                

       6   constructor(title, width, showArr        6   constructor(title, width, showArr

ow, placement, ...children) {                ow, placement, ...children) {               

       7     super('div', `${cssPrefix}-drop        7     super('div', `${cssPrefix}-drop

down ${placement}`);                         down ${placement}`);                        

       8     this.title = title;                    8     this.title = title;            

       9     this.change = () => {};                9     this.change = () => {};        

                                                   10     this.headerClick = () => {};   

      10     if (typeof title === 'string')        11     if (typeof title === 'string') 

{                                            {                                           

      11       this.title = h('div', `${cssP       12       this.title = h('div', `${cssP

refix}-dropdown-title`).child(title          refix}-dropdown-title`).child(title         

);                                           );                                          

      12     } else if (showArrow) {               13     } else if (showArrow) {        

      13       this.title.addClass('arrow-le       14       this.title.addClass('arrow-le

ft');                                        ft');                                       

      14     }                                     15     }                              

      15     this.contentEl = h('div', `${cs       16     this.contentEl = h('div', `${cs

sPrefix}-dropdown-content`)                  sPrefix}-dropdown-content`)                 

      16       .children(...children)                                                    

      17       .css('width', width)                17       .css('width', width)         

      18       .hide();                            18       .hide();                     

                                                   19                                    

                                                   20     this.setContentChildren(...chil

                                             dren);                                      

      19                                           21                                    

      20     this.headerEl = h('div', `${css       22     this.headerEl = h('div', `${css

Prefix}-dropdown-header`);                   Prefix}-dropdown-header`);                  

      21     this.headerEl.on('click', () =>       23     this.headerEl.on('click', () =>

 {                                            {                                          

      22       if (this.contentEl.css('displ       24       if (this.contentEl.css('displ

ay') !== 'block') {                          ay') !== 'block') {                         

      23         this.show();                      25         this.show();               

---                                          ---                                         

      29       showArrow ? h('div', `${cssPr       31       showArrow ? h('div', `${cssPr

efix}-icon arrow-right`).child(              efix}-icon arrow-right`).child(             

      30         h('div', `${cssPrefix}-icon       32         h('div', `${cssPrefix}-icon

-img arrow-down`),                           -img arrow-down`),                          

      31       ) : '',                             33       ) : '',                      

      32     );                                    34     );                             

      33     this.children(this.headerEl, th       35     this.children(this.headerEl, th

is.contentEl);                               is.contentEl);                              

                                                   36   }                                

                                                   37                                    

                                                   38   setContentChildren(...children) {

                                                   39     this.contentEl.html('');       

                                                   40     if (children.length > 0) {     

                                                   41       this.contentEl.children(...ch

                                             ildren);                                    

                                                   42     }                              

      34   }                                       43   }                                

      35                                           44                                    

      36   setTitle(title) {                       45   setTitle(title) {                

      37     this.title.html(title);               46     this.title.html(title);        

      38     this.hide();                          47     this.hide();                   

```

##  ../src/component/dropdown_align.js  ->  ../../x-spreadsheet/src/component/dropdown_align.js  
```
```

##  ../src/component/dropdown_border.js  ->  ../../x-spreadsheet/src/component/dropdown_border.js  
```
```

##  ../src/component/dropdown_color.js  ->  ../../x-spreadsheet/src/component/dropdown_color.js  
```
```

##  ../src/component/dropdown_font.js  ->  ../../x-spreadsheet/src/component/dropdown_font.js  
```
```

##  ../src/component/dropdown_fontsize.js  ->  ../../x-spreadsheet/src/component/dropdown_fontsize.js  
```
```

##  ../src/component/dropdown_format.js  ->  ../../x-spreadsheet/src/component/dropdown_format.js  
```
../src/component/dropdown_format.js          ../../x-spreadsheet/src/component/dropdown_format.js

       5                                            5                                    

       6 export default class DropdownFormat        6 export default class DropdownFormat

 extends Dropdown {                           extends Dropdown {                         

       7   constructor() {                          7   constructor() {                  

       8     let nformats = baseFormats.slic        8     let nformats = baseFormats.slic

e(0);                                        e(0);                                       

       9     nformats.splice(2, 0, { key: 'd        9     nformats.splice(2, 0, { key: 'd

ivider' });                                  ivider' });                                 

      10     nformats.splice(7, 0, { key: 'd       10     nformats.splice(8, 0, { key: 'd

ivider' });                                  ivider' });                                 

      11     nformats = nformats.map((it) =>       11     nformats = nformats.map((it) =>

 {                                            {                                          

      12       const item = h('div', `${cssP       12       const item = h('div', `${cssP

refix}-item`);                               refix}-item`);                              

      13       if (it.key === 'divider') {         13       if (it.key === 'divider') {  

      14         item.addClass('divider');         14         item.addClass('divider');  

      15       } else {                            15       } else {                     

```

##  ../src/component/dropdown_formula.js  ->  ../../x-spreadsheet/src/component/dropdown_formula.js  
```
```

##  ../src/component/dropdown_linetype.js  ->  ../../x-spreadsheet/src/component/dropdown_linetype.js  
```
```

##  ../src/component/editor.js  ->  ../../x-spreadsheet/src/component/editor.js  
```
../src/component/editor.js                   ../../x-spreadsheet/src/component/editor.js 

       4 import Datepicker from './datepicke        4 import Datepicker from './datepicke

r';                                          r';                                         

       5 import { cssPrefix } from '../confi        5 import { cssPrefix } from '../confi

g';                                          g';                                         

       6 // import { mouseMoveUp } from '../        6 // import { mouseMoveUp } from '../

event';                                      event';                                     

       7                                            7                                    

       8 function resetTextareaSize() {             8 function resetTextareaSize() {     

                                                    9   const { inputText } = this;      

       9 //  if (!/^\s*$/.test(this.inputTex       10   if (!/^\s*$/.test(inputText)) {  

t)) {                                                                                    

      10     const {                               11     const {                        

      11       textlineEl, textEl, areaOffse       12       textlineEl, textEl, areaOffse

t,                                           t,                                          

      12     } = this;                             13     } = this;                      

                                                   14     const txts = inputText.split('\

                                             n');                                        

                                                   15     const maxTxtSize = Math.max(...

                                             txts.map(it => it.length));                 

      13     const tlineWidth = textlineEl.o       16     const tlOffset = textlineEl.off

ffset().width + 9;                           set();                                      

                                                   17     const fontWidth = tlOffset.widt

                                             h / inputText.length;                       

                                                   18     const tlineWidth = (maxTxtSize 

                                             + 1) * fontWidth + 5;                       

      14     const maxWidth = this.viewFn().       19     const maxWidth = this.viewFn().

width - areaOffset.left - 9;                 width - areaOffset.left - fontWidth         

                                             ;                                           

      15     // console.log('tlineWidth:', t       20     let h1 = txts.length;          

lineWidth, ':', maxWidth);                                                               

      16     if (tlineWidth > areaOffset.wid       21     if (tlineWidth > areaOffset.wid

th) {                                        th) {                                       

      17       let twidth = tlineWidth;            22       let twidth = tlineWidth;     

      18       if (tlineWidth > maxWidth) {        23       if (tlineWidth > maxWidth) { 

      19         twidth = maxWidth;                24         twidth = maxWidth;         

      20         let h1 = parseInt(tlineWidt       25         h1 += parseInt(tlineWidth /

h / maxWidth, 10);                            maxWidth, 10);                             

      21         h1 += (tlineWidth % maxWidt       26         h1 += (tlineWidth % maxWidt

h) > 0 ? 1 : 0;                              h) > 0 ? 1 : 0;                             

                                                   27       }                            

                                                   28       textEl.css('width', `${twidth

                                             }px`);                                      

                                                   29     }                              

      22         h1 *= this.rowHeight;             30     h1 *= this.rowHeight;          

      23         if (h1 > areaOffset.height)       31     if (h1 > areaOffset.height) {  

 {                                                                                       

      24           textEl.css('height', `${h       32       textEl.css('height', `${h1}px

1}px`);                                      `);                                         

                                                   33     }                              

                                                   34   }                                

                                                   35 }                                  

                                                   36                                    

                                                   37 function inputEventHandler(evt) {  

                                                   38   const v = evt.target.value;      

                                                   39   // console.log(evt, 'v:', v);    

                                                   40   const { suggest, textlineEl, vali

                                             dator } = this;                             

                                                   41   const { cell } = this;           

                                                   42   if (cell !== null) {             

                                                   43     if (('editable' in cell && cell

                                             .editable === true) || (cell.editab         

                                             le === undefined)) {                        

                                                   44       this.inputText = v;          

                                                   45       if (validator) {             

                                                   46         if (validator.type === 'lis

                                             t') {                                       

                                                   47           suggest.search(v);       

                                                   48         } else {                   

                                                   49           suggest.hide();          

      25         }                                 50         }                          

                                                   51       } else {                     

                                                   52         const start = v.lastIndexOf

                                             ('=');                                      

                                                   53         if (start !== -1) {        

                                                   54           suggest.search(v.substrin

                                             g(start + 1));                              

                                                   55         } else {                   

                                                   56           suggest.hide();          

      26       }                                   57         }                          

      27       textEl.css('width', `${twidth                                             

}px`);                                                                                   

      28     }                                     58       }                            

      29 //  }                                     59       textlineEl.html(v);          

      30 }                                         60       resetTextareaSize.call(this);

      31                                           61       this.change('input', v);     

      32 function inputEventHandler(evt) {                                               

      33     const keyCode = evt.keyCode ||                                              

evt.which;                                                                               

      34     const {                                                                     

      35       key, ctrlKey, shiftKey, altKe                                             

y, metaKey,                                                                              

      36     } = evt;                                                                    

      37                                                                                 

      38 /*                                                                              

      39     if (altKey) {                                                               

      40       console.log("alt:",keyCode);                                              

      41       switch (keyCode) {                                                        

      42         case 13:                                                                

      43             console.log("input alt+                                             

Enter");                                                                                 

      44             break;                                                              

      45       }                                                                         

      46 }                                                                               

      47 */                                                                              

      48   //console.log("input:",evt);                                                  

      49                                                                                 

      50   const v = evt.target.value;                                                   

      51   const { suggest, textlineEl, vali                                             

dator } = this;                                                                          

      52   this.inputText =  v ;                                                         

      53   if (validator) {                                                              

      54     if (validator.type === 'list')                                              

{                                                                                        

      55       suggest.search(v);                                                        

      56     } else {                              62     } else {                       

      57       suggest.hide();                     63       evt.target.value = '';       

      58     }                                     64     }                              

      59   } else {                                65   } else {                         

      60     const start = v.lastIndexOf('='       66     this.inputText = v;            

);                                                                                       

      61     if (start !== -1) {                   67     if (validator) {               

      62       suggest.search(v.substring(st       68       if (validator.type === 'list'

art + 1));                                   ) {                                         

                                                   69         suggest.search(v);         

                                                   70       } else {                     

                                                   71         suggest.hide();            

                                                   72       }                            

      63     } else {                              73     } else {                       

      64       suggest.hide();                                                           

      65     }                                                                           

      66   }                                                                             

      67   textlineEl.html(v);                                                           

      68   resetTextareaSize.call(this);                                                 

      69   this.change('input', v);                                                      

      70 }                                                                               

      71                                                                                 

      72 function keydownEventHandler(evt) {                                             

      73                                                                                 

      74     const keyCode = evt.keyCode ||                                              

evt.which;                                                                               

      75     const {                                                                     

      76       key, ctrlKey, shiftKey, altKe                                             

y, metaKey,                                                                              

      77     } = evt;                                                                    

      78                                                                                 

      79   var v = evt.target.value;                                                     

      80   var t = evt.target;                                                           

      81                        //console.lo                                             

g("input :", evt);                                                                       

      82                        //console.lo                                             

g("v :", t);                                                                             

      83                                                                                 

      84       if (altKey) {                                                             

      85             switch (keyCode) {                                                  

      86                  case 13:                                                       

      87                        //console.lo                                             

g("input alt+Enter");                                                                    

      88                        //v = 13;                                                

      89                        //v = '&#13'                                             

;                                                                                        

      90                        //t.value =                                              

 t.value + 13                                                                            

      91                        //t.value =                                              

 t.value + '&#13;&#10;';                                                                 

      92                        //t.value =                                              

 t.value + "&#10;";                                                                      

      93                       // var newlin                                             

e = String.fromCharCode(13, 10);                                                         

      94                        var newline                                              

= String.fromCharCode(13,10 );                                                           

      95                        t.value =  t                                             

.value + newline;                                                                        

      96                        //t.value =                                              

 t.value + "<pre>";                                                                      

      97                        ;                                                        

      98                        break;                                                   

      99              }                                                                  

     100        }                                                                        

     101                                                                                 

     102 //  console.log("keydown:",evt);                                                

     103                                                                                 

     104   //const v = evt.target.value;                                                 

     105   const { suggest, textlineEl, vali                                             

dator } = this;                                                                          

     106   this.inputText =  v ;                                                         

     107   if (validator) {                                                              

     108     if (validator.type === 'list')                                              

{                                                                                        

     109       suggest.search(v);                                                        

     110     } else {                                                                    

     111       suggest.hide();                                                           

     112     }                                                                           

     113   } else {                                                                      

     114     if (typeof v === 'string' || v                                              

instanceof String) {                                                                     

     115     const start = v.lastIndexOf('='       74       const start = v.lastIndexOf('

);                                           =');                                        

     116     if (start !== -1) {                   75       if (start !== -1) {          

     117       suggest.search(v.substring(st       76         suggest.search(v.substring(

art + 1));                                   start + 1));                                

     118     } else {                              77       } else {                     

     119       suggest.hide();                     78         suggest.hide();            

     120     }                                     79       }                            

     121     }                                                                           

     122   }                                       80     }                              

     123   textlineEl.html(v);                     81     textlineEl.html(v);            

     124   resetTextareaSize.call(this);           82     resetTextareaSize.call(this);  

     125   this.change('textarea', v);             83     this.change('input', v);       

     126                                           84   }                                

     127   ////                                                                          

     128   /*                                                                            

     129     var el = this;                                                              

     130   setTimeout(function(){                                                        

     131     el.style.cssText = 'height:auto                                             

; padding:0';                                                                            

     132     // for box-sizing other than "c                                             

ontent-box" use:                                                                         

     133     // el.style.cssText = '-moz-box                                             

-sizing:content-box';                                                                    

     134     el.style.cssText = 'height:' +                                              

el.scrollHeight + 'px';                                                                  

     135   },0);                                                                         

     136   */                                                                            

     137       var textarea = evt.target;                                                

     138                                                                                 

     139    textarea.style.height = ""; /* R                                             

eset the height*/                                                                        

     140   textarea.style.height = textarea.                                             

scrollHeight + "px";                                                                     

     141 }                                         85 }                                  

     142                                           86                                    

     143 function setTextareaRange(position)       87 function setTextareaRange(position)

 {                                            {                                          

     144   const { el } = this.textEl;             88   const { el } = this.textEl;      

     145   setTimeout(() => {                      89   setTimeout(() => {               

---                                          ---                                         

     189   let month = d.getMonth() + 1;          133   let month = d.getMonth() + 1;    

     190   let date = d.getDate();                134   let date = d.getDate();          

     191   if (month < 10) month = `0${month      135   if (month < 10) month = `0${month

}`;                                          }`;                                         

     192   if (date < 10) date = `0${date}`;      136   if (date < 10) date = `0${date}`;

     193   return `${d.getFullYear()}-${mont      137   return `${d.getFullYear()}-${mont

h}-${date}`;                                 h}-${date}`;                                

     194 }                                                                               

     195                                                                                 

     196 function textarea_autosize(){                                                   

     197       var rows = parseInt(textarea.                                             

getAttribute("rows"));                                                                   

     198     // If we don't decrease the amo                                             

unt of rows, the scrollHeight would                                                      

 show the scrollHeight for all the                                                       

rows                                                                                     

     199     // even if there is no text.                                                

     200     textarea.setAttribute("rows", "                                             

1");                                                                                     

     201                                                                                 

     202     if (rows < limitRows && textare                                             

a.scrollHeight > messageLastScrollH                                                      

eight) {                                                                                 

     203         rows++;                                                                 

     204     } else if (rows > 1 && textarea                                             

.scrollHeight < messageLastScrollHe                                                      

ight) {                                                                                  

     205         rows--;                                                                 

     206     }                                                                           

     207                                                                                 

     208     messageLastScrollHeight = texta                                             

rea.scrollHeight;                                                                        

     209     textarea.setAttribute("rows", r                                             

ows);                                                                                    

     210 }                                        138 }                                  

     211                                          139                                    

     212 export default class Editor {            140 export default class Editor {      

     213   constructor(formulas, viewFn, row      141   constructor(formulas, viewFn, row

Height) {                                    Height) {                                   

     214     this.viewFn = viewFn;                142     this.viewFn = viewFn;          

---                                          ---                                         

     224       this.clear();                      152       this.clear();                

     225     });                                  153     });                            

     226     this.areaEl = h('div', `${cssPr      154     this.areaEl = h('div', `${cssPr

efix}-editor-area`)                          efix}-editor-area`)                         

     227       .children(                         155       .children(                   

     228         this.textEl = h('textarea',      156         this.textEl = h('textarea',

 '')                                          '')                                        

     229        //   .on('input', evt => inp      157           .on('input', evt => input

utEventHandler.call(this, evt)),             EventHandler.call(this, evt)),              

     230           .on('keydown', evt => key                                             

downEventHandler.call(this, evt)),                                                       

     231         //  .on('textarea', evt =>                                              

textareaEventHandler.call(this, evt                                                      

)),                                                                                      

     232         //this.textEl.attr("rows","                                             

5"),                                                                                     

     233         //this.textEl.attr("cols","                                             

5"),                                                                                     

     234                                                                                 

     235         this.textlineEl = h('div',       158         this.textlineEl = h('div', 

'textline'),                                 'textline'),                                

     236         this.suggest.el,                 159         this.suggest.el,           

     237         this.datepicker.el,              160         this.datepicker.el,        

     238       )                                  161       )                            

     239       .on('mousemove.stop', () => {      162       .on('mousemove.stop', () => {

})                                           })                                          

---                                          ---                                         

     325       }                                  248       }                            

     326     }                                    249     }                              

     327   }                                      250   }                                

     328                                          251                                    

     329   setText(text) {                        252   setText(text) {                  

     330     this.inputText = text ;              253     this.inputText = text;         

     331     // console.log('text>>:', text)      254     // console.log('text>>:', text)

;                                            ;                                           

     332     setText.call(this, text, text.l      255     setText.call(this, text, text.l

ength);                                      ength);                                     

     333     resetTextareaSize.call(this);        256     resetTextareaSize.call(this);  

     334   }                                      257   }                                

     335 }                                        258 }                                  

```

##  ../src/component/element.js  ->  ../../x-spreadsheet/src/component/element.js  
```
../src/component/element.js                  ../../x-spreadsheet/src/component/element.js

      42     });                                   42     });                            

      43     return this;                          43     return this;                   

      44   }                                       44   }                                

      45                                           45                                    

      46   offset(value) {                         46   offset(value) {                  

      47     //console.log("element offset v                                             

alue: ", value);                                                                         

      48     if (value !== undefined) {            47     if (value !== undefined) {     

      49       Object.keys(value).forEach((k       48       Object.keys(value).forEach((k

) => {                                       ) => {                                      

      50         this.css(k, `${value[k]}px`       49         this.css(k, `${value[k]}px`

);                                           );                                          

      51       });                                 50       });                          

      52       return this;                        51       return this;                 

      53     }                                     52     }                              

      54                                                                                 

      55     const {                               53     const {                        

      56       offsetTop, offsetLeft, offset       54       offsetTop, offsetLeft, offset

Height, offsetWidth,                         Height, offsetWidth,                        

      57     } = this.el;                          55     } = this.el;                   

      58     return {                              56     return {                       

      59       top: offsetTop,                     57       top: offsetTop,              

---                                          ---                                         

      90     }                                     88     }                              

      91     eles.forEach(ele => this.child(       89     eles.forEach(ele => this.child(

ele));                                       ele));                                      

      92     return this;                          90     return this;                   

      93   }                                       91   }                                

      94                                           92                                    

                                                   93   removeChild(el) {                

                                                   94     this.el.removeChild(el);       

                                                   95   }                                

                                                   96                                    

      95   /*                                      97   /*                               

      96   first() {                               98   first() {                        

      97     return this.el.firstChild;            99     return this.el.firstChild;     

      98   }                                      100   }                                

      99                                          101                                    

---                                          ---                                         

     220     if (v !== undefined) {               222     if (v !== undefined) {         

     221       this.el.value = v;                 223       this.el.value = v;           

     222       return this;                       224       return this;                 

     223     }                                    225     }                              

     224     return this.el.value;                226     return this.el.value;          

                                                  227   }                                

                                                  228                                    

                                                  229   focus() {                        

                                                  230     this.el.focus();               

     225   }                                      231   }                                

     226                                          232                                    

     227   cssRemoveKeys(...keys) {               233   cssRemoveKeys(...keys) {         

     228     keys.forEach(k => this.el.style      234     keys.forEach(k => this.el.style

.removeProperty(k));                         .removeProperty(k));                        

     229     return this;                         235     return this;                   

```

##  ../src/component/event.js  ->  ../../x-spreadsheet/src/component/event.js  
```
```

##  ../src/component/form_field.js  ->  ../../x-spreadsheet/src/component/form_field.js  
```
```

##  ../src/component/form_input.js  ->  ../../x-spreadsheet/src/component/form_input.js  
```
../src/component/form_input.js               ../../x-spreadsheet/src/component/form_input.js

       9       .on('input', evt => this.vcha        9       .on('input', evt => this.vcha

nge(evt))                                    nge(evt))                                   

      10       .attr('placeholder', hint);         10       .attr('placeholder', hint);  

      11     this.el.child(this.input);            11     this.el.child(this.input);     

      12   }                                       12   }                                

      13                                           13                                    

                                                   14   focus() {                        

                                                   15     setTimeout(() => {             

                                                   16       this.input.el.focus();       

                                                   17     }, 10);                        

                                                   18   }                                

                                                   19                                    

      14   hint(v) {                               20   hint(v) {                        

      15     this.input.attr('placeholder',        21     this.input.attr('placeholder', 

v);                                          v);                                         

      16   }                                       22   }                                

      17                                           23                                    

      18   val(v) {                                24   val(v) {                         

```

##  ../src/component/form_select.js  ->  ../../x-spreadsheet/src/component/form_select.js  
```
```

##  ../src/component/icon.js  ->  ../../x-spreadsheet/src/component/icon.js  
```
```

##  ../src/component/message.js  ->  ../../x-spreadsheet/src/component/message.js  
```
```

##  ../src/component/modal.js  ->  ../../x-spreadsheet/src/component/modal.js  
```
```

##  ../src/component/modal_validation.js  ->  ../../x-spreadsheet/src/component/modal_validation.js  
```
```

##  ../src/component/resizer.js  ->  ../../x-spreadsheet/src/component/resizer.js  
```
../src/component/resizer.js                  ../../x-spreadsheet/src/component/resizer.js

       6 export default class Resizer {             6 export default class Resizer {     

       7   constructor(vertical = false, min        7   constructor(vertical = false, min

Distance) {                                  Distance) {                                 

       8     this.moving = false;                   8     this.moving = false;           

       9     this.vertical = vertical;              9     this.vertical = vertical;      

      10     this.el = h('div', `${cssPrefix       10     this.el = h('div', `${cssPrefix

}-resizer ${vertical ? 'vertical' :          }-resizer ${vertical ? 'vertical' :         

 'horizontal'}`).children(                    'horizontal'}`).children(                  

                                                   11       this.unhideHoverEl = h('div',

                                              `${cssPrefix}-resizer-hover`)              

                                                   12         .on('dblclick.stop', evt =>

                                              this.mousedblclickHandler(evt))            

                                                   13         .css('position', 'absolute'

                                             ).hide(),                                   

      11       this.hoverEl = h('div', `${cs       14       this.hoverEl = h('div', `${cs

sPrefix}-resizer-hover`)                     sPrefix}-resizer-hover`)                    

      12         .on('mousedown.stop', evt =       15         .on('mousedown.stop', evt =

> this.mousedownHandler(evt)),               > this.mousedownHandler(evt)),              

      13       this.lineEl = h('div', `${css       16       this.lineEl = h('div', `${css

Prefix}-resizer-line`).hide(),               Prefix}-resizer-line`).hide(),              

      14     ).hide();                             17     ).hide();                      

      15     // cell rect                          18     // cell rect                   

      16     this.cRect = null;                    19     this.cRect = null;             

      17     this.finishedFn = null;               20     this.finishedFn = null;        

      18     this.minDistance = minDistance;       21     this.minDistance = minDistance;

                                                   22     this.unhideFn = () => {};      

                                                   23   }                                

                                                   24                                    

                                                   25   showUnhide(index) {              

                                                   26     this.unhideIndex = index;      

                                                   27     this.unhideHoverEl.show();     

                                                   28   }                                

                                                   29                                    

                                                   30   hideUnhide() {                   

                                                   31     this.unhideHoverEl.hide();     

      19   }                                       32   }                                

      20                                           33                                    

      21   // rect : {top, left, width, heig       34   // rect : {top, left, width, heig

ht}                                          ht}                                         

      22   // line : {width, height}               35   // line : {width, height}        

      23   show(rect, line) {                      36   show(rect, line) {               

      24     const {                               37     const {                        

      25       moving, vertical, hoverEl, li       38       moving, vertical, hoverEl, li

neEl, el,                                    neEl, el,                                   

                                                   39       unhideHoverEl,               

      26     } = this;                             40     } = this;                      

      27     if (moving) return;                   41     if (moving) return;            

      28     this.cRect = rect;                    42     this.cRect = rect;             

      29     const {                               43     const {                        

      30       left, top, width, height,           44       left, top, width, height,    

---                                          ---                                         

      39     });                                   53     });                            

      40     lineEl.offset({                       54     lineEl.offset({                

      41       width: vertical ? 0 : line.wi       55       width: vertical ? 0 : line.wi

dth,                                         dth,                                        

      42       height: vertical ? line.heigh       56       height: vertical ? line.heigh

t : 0,                                       t : 0,                                      

      43     });                                   57     });                            

                                                   58     unhideHoverEl.offset({         

                                                   59       left: vertical ? 5 - width : 

                                             left,                                       

                                                   60       top: vertical ? top : 5 - hei

                                             ght,                                        

                                                   61       width: vertical ? 5 : width, 

                                                   62       height: vertical ? height : 5

                                             ,                                           

                                                   63     });                            

      44   }                                       64   }                                

      45                                           65                                    

      46   hide() {                                66   hide() {                         

      47     this.el.offset({                      67     this.el.offset({               

      48       left: 0,                            68       left: 0,                     

      49       top: 0,                             69       top: 0,                      

      50     }).hide();                            70     }).hide();                     

                                                   71     this.hideUnhide();             

                                                   72   }                                

                                                   73                                    

                                                   74   mousedblclickHandler() {         

                                                   75     if (this.unhideIndex) this.unhi

                                             deFn(this.unhideIndex);                     

      51   }                                       76   }                                

      52                                           77                                    

      53   mousedownHandler(evt) {                 78   mousedownHandler(evt) {          

      54     let startEvt = evt;                   79     let startEvt = evt;            

      55     const {                               80     const {                        

```

##  ../src/component/scrollbar.js  ->  ../../x-spreadsheet/src/component/scrollbar.js  
```
../src/component/scrollbar.js                ../../x-spreadsheet/src/component/scrollbar.js

      30   set(distance, contentDistance) {        30   set(distance, contentDistance) { 

      31     const d = distance - 1;               31     const d = distance - 1;        

      32     // console.log('distance:', dis       32     // console.log('distance:', dis

tance, ', contentDistance:', conten          tance, ', contentDistance:', conten         

tDistance);                                  tDistance);                                 

      33     if (contentDistance > d) {            33     if (contentDistance > d) {     

      34       const cssKey = this.vertical        34       const cssKey = this.vertical 

? 'height' : 'width';                        ? 'height' : 'width';                       

                                                   35       // console.log('d:', d);     

      35       this.el.css(cssKey, `${d}px`)       36       this.el.css(cssKey, `${d - 15

.show();                                     }px`).show();                               

      36       this.contentEl                      37       this.contentEl               

      37         .css(this.vertical ? 'width       38         .css(this.vertical ? 'width

' : 'height', '1px')                         ' : 'height', '1px')                        

      38         .css(cssKey, `${contentDist       39         .css(cssKey, `${contentDist

ance}px`);                                   ance}px`);                                  

      39     } else {                              40     } else {                       

      40       this.el.hide();                     41       this.el.hide();              

```

##  ../src/component/selector.js  ->  ../../x-spreadsheet/src/component/selector.js  
```
../src/component/selector.js                 ../../x-spreadsheet/src/component/selector.js

       4                                            4                                    

       5 const selectorHeightBorderWidth = 2        5 const selectorHeightBorderWidth = 2

 * 2 - 1;                                     * 2 - 1;                                   

       6 let startZIndex = 10;                      6 let startZIndex = 10;              

       7                                            7                                    

       8 class SelectorElement {                    8 class SelectorElement {            

       9   constructor() {                          9   constructor(useHideInput = false)

                                              {                                          

                                                   10     this.useHideInput = useHideInpu

                                             t;                                          

                                                   11     this.inputChange = () => {};   

      10     this.cornerEl = h('div', `${css       12     this.cornerEl = h('div', `${css

Prefix}-selector-corner`);                   Prefix}-selector-corner`);                  

      11     this.areaEl = h('div', `${cssPr       13     this.areaEl = h('div', `${cssPr

efix}-selector-area`)                        efix}-selector-area`)                       

      12       .child(this.cornerEl).hide();       14       .child(this.cornerEl).hide();

      13     this.clipboardEl = h('div', `${       15     this.clipboardEl = h('div', `${

cssPrefix}-selector-clipboard`).hid          cssPrefix}-selector-clipboard`).hid         

e();                                         e();                                        

      14     this.autofillEl = h('div', `${c       16     this.autofillEl = h('div', `${c

ssPrefix}-selector-autofill`).hide(          ssPrefix}-selector-autofill`).hide(         

);                                           );                                          

      15     this.el = h('div', `${cssPrefix       17     this.el = h('div', `${cssPrefix

}-selector`)                                 }-selector`)                                

      16       .css('z-index', `${startZInde       18       .css('z-index', `${startZInde

x}`)                                         x}`)                                        

      17       .children(this.areaEl, this.c       19       .children(this.areaEl, this.c

lipboardEl, this.autofillEl)                 lipboardEl, this.autofillEl)                

      18       .hide();                            20       .hide();                     

                                                   21     if (useHideInput) {            

                                                   22       this.hideInput = h('input', '

                                             ')                                          

                                                   23         .on('input', (evt) => {    

                                                   24           this.inputChange(evt.targ

                                             et.value);                                  

                                                   25         });                        

                                                   26       this.el.child(this.hideInputD

                                             iv = h('div', 'hide-input').child(t         

                                             his.hideInput));                            

                                                   27     }                              

      19     startZIndex += 1;                     28     startZIndex += 1;              

      20   }                                       29   }                                

      21                                           30                                    

      22   setOffset(v) {                          31   setOffset(v) {                   

      23     this.el.offset(v).show();             32     this.el.offset(v).show();      

---                                          ---                                         

      31                                           40                                    

      32   setAreaOffset(v) {                      41   setAreaOffset(v) {               

      33     const {                               42     const {                        

      34       left, top, width, height,           43       left, top, width, height,    

      35     } = v;                                44     } = v;                         

      36     this.areaEl.offset({                  45     const of = {                   

      37       width: width - selectorHeight       46       width: width - selectorHeight

BorderWidth + 0.8,                           BorderWidth + 0.8,                          

      38       height: height - selectorHeig       47       height: height - selectorHeig

htBorderWidth + 0.8,                         htBorderWidth + 0.8,                        

      39       left: left - 0.8,                   48       left: left - 0.8,            

      40       top: top - 0.8,                     49       top: top - 0.8,              

      41     }).show();                            50     };                             

                                                   51     this.areaEl.offset(of).show(); 

                                                   52     if (this.useHideInput) {       

                                                   53       this.hideInputDiv.offset(of);

                                                   54       this.hideInput.val('').focus(

                                             );                                          

                                                   55     }                              

      42   }                                       56   }                                

      43                                           57                                    

      44   setClipboardOffset(v) {                 58   setClipboardOffset(v) {          

      45     const {                               59     const {                        

      46       left, top, width, height,           60       left, top, width, height,    

---                                          ---                                         

     178   setLClipboardOffset.call(this, of      192   setLClipboardOffset.call(this, of

fset);                                       fset);                                      

     179 }                                        193 }                                  

     180                                          194                                    

     181 export default class Selector {          195 export default class Selector {    

     182   constructor(data) {                    196   constructor(data) {              

                                                  197     this.inputChange = () => {};   

     183     this.data = data;                    198     this.data = data;              

     184     this.br = new SelectorElement()      199     this.br = new SelectorElement(t

;                                            rue);                                       

     185     this.t = new SelectorElement();      200     this.t = new SelectorElement();

     186     this.l = new SelectorElement();      201     this.l = new SelectorElement();

     187     this.tl = new SelectorElement()      202     this.tl = new SelectorElement()

;                                            ;                                           

                                                  203     this.br.inputChange = (v) => { 

                                                  204       this.inputChange(v);         

                                                  205     };                             

     188     this.br.el.show();                   206     this.br.el.show();             

     189     this.offset = null;                  207     this.offset = null;            

     190     this.areaOffset = null;              208     this.areaOffset = null;        

     191     this.indexes = null;                 209     this.indexes = null;           

     192     this.range = null;                   210     this.range = null;             

---                                          ---                                         

     202     // for performance                   220     // for performance             

     203     this.lastri = -1;                    221     this.lastri = -1;              

     204     this.lastci = -1;                    222     this.lastci = -1;              

     205                                          223                                    

     206     startZIndex += 1;                    224     startZIndex += 1;              

                                                  225   }                                

                                                  226                                    

                                                  227   resetData(data) {                

                                                  228     this.data = data;              

                                                  229     this.range = data.selector.rang

                                             e;                                          

                                                  230     this.resetAreaOffset();        

     207   }                                      231   }                                

     208                                          232                                    

     209   hide() {                               233   hide() {                         

     210     this.el.hide();                      234     this.el.hide();                

     211   }                                      235   }                                

```

##  ../src/component/sheet.js  ->  ../../x-spreadsheet/src/component/sheet.js  
```
../src/component/sheet.js                    ../../x-spreadsheet/src/component/sheet.js  

       3 import { bind, mouseMoveUp, bindTou        3 import { bind, mouseMoveUp, bindTou

ch } from './event';                         ch } from './event';                        

       4 import Resizer from './resizer';           4 import Resizer from './resizer';   

       5 import Scrollbar from './scrollbar'        5 import Scrollbar from './scrollbar'

;                                            ;                                           

       6 import Selector from './selector';         6 import Selector from './selector'; 

       7 import Editor from './editor';             7 import Editor from './editor';     

                                                    8 import Print from './print';       

       8 import ContextMenu from './contextm        9 import ContextMenu from './contextm

enu';                                        enu';                                       

       9 //import Table from './table';                                                  

      10 import Table from './table2';             10 import Table from './table';       

      11 import Toolbar from './toolbar';          11 import Toolbar from './toolbar/inde

                                             x';                                         

      12 import ModalValidation from './moda       12 import ModalValidation from './moda

l_validation';                               l_validation';                              

      13 import SortFilter from './sort_filt       13 import SortFilter from './sort_filt

er';                                         er';                                        

      14 import { xtoast } from './message';       14 import { xtoast } from './message';

      15 import { cssPrefix } from '../confi       15 import { cssPrefix } from '../confi

g';                                          g';                                         

      16 import { formulas } from '../core/f       16 import { formulas } from '../core/f

ormula';                                     ormula';                                    

                                                   17                                    

                                                   18 /**                                

                                                   19  * @desc throttle fn               

                                                   20  * @param func function            

                                                   21  * @param wait Delay in millisecond

                                             s                                           

                                                   22  */                                

                                                   23 function throttle(func, wait) {    

                                                   24   let timeout;                     

                                                   25   return (...arg) => {             

                                                   26     const that = this;             

                                                   27     const args = arg;              

                                                   28     if (!timeout) {                

                                                   29       timeout = setTimeout(() => { 

                                                   30         timeout = null;            

                                                   31         func.apply(that, args);    

                                                   32       }, wait);                    

                                                   33     }                              

                                                   34   };                               

                                                   35 }                                  

      17                                           36                                    

      18 function scrollbarMove() {                37 function scrollbarMove() {         

      19   const {                                 38   const {                          

      20     data, verticalScrollbar, horizo       39     data, verticalScrollbar, horizo

ntalScrollbar,                               ntalScrollbar,                              

      21   } = this;                               40   } = this;                        

---                                          ---                                         

      43   }                                       62   }                                

      44 }                                         63 }                                  

      45                                           64                                    

      46 function selectorSet(multiple, ri,        65 function selectorSet(multiple, ri, 

ci, indexesUpdated = true, moving =          ci, indexesUpdated = true, moving =         

 false) {                                     false) {                                   

      47   if (ri === -1 && ci === -1) retur       66   if (ri === -1 && ci === -1) retur

n;                                           n;                                          

      48   // console.log(multiple, ', ri:',                                             

 ri, ', ci:', ci);                                                                       

      49   const {                                 67   const {                          

      50     table, selector, toolbar,             68     table, selector, toolbar, data,

                                                   69     contextMenu,                   

      51   } = this;                               70   } = this;                        

                                                   71   contextMenu.setMode((ri === -1 ||

                                              ci === -1) ? 'row-col' : 'range');         

                                                   72   const cell = data.getCell(ri, ci)

                                             ;                                           

      52   if (multiple) {                         73   if (multiple) {                  

      53     selector.setEnd(ri, ci, moving)       74     selector.setEnd(ri, ci, moving)

;                                            ;                                           

                                                   75     this.trigger('cells-selected', 

                                             cell, selector.range);                      

      54   } else {                                76   } else {                         

                                                   77     // trigger click event         

      55     selector.set(ri, ci, indexesUpd       78     selector.set(ri, ci, indexesUpd

ated);                                       ated);                                      

                                                   79     this.trigger('cell-selected', c

                                             ell, ri, ci);                               

      56   }                                       80   }                                

      57   toolbar.reset();                        81   toolbar.reset();                 

      58   table.render();                         82   table.render();                  

      59 }                                         83 }                                  

      60                                           84                                    

---                                          ---                                         

     117   if (cRect.ri >= 0 && cRect.ci ===      141   if (cRect.ri >= 0 && cRect.ci ===

 -1) {                                        -1) {                                      

     118     cRect.width = cols.indexWidth;       142     cRect.width = cols.indexWidth; 

     119     rowResizer.show(cRect, {             143     rowResizer.show(cRect, {       

     120       width: tRect.width,                144       width: tRect.width,          

     121     });                                  145     });                            

                                                  146     if (rows.isHide(cRect.ri - 1)) 

                                             {                                           

                                                  147       rowResizer.showUnhide(cRect.r

                                             i);                                         

                                                  148     } else {                       

                                                  149       rowResizer.hideUnhide();     

                                                  150     }                              

     122   } else {                               151   } else {                         

     123     rowResizer.hide();                   152     rowResizer.hide();             

     124   }                                      153   }                                

     125   if (cRect.ri === -1 && cRect.ci >      154   if (cRect.ri === -1 && cRect.ci >

= 0) {                                       = 0) {                                      

     126     cRect.height = rows.height;          155     cRect.height = rows.height;    

     127     colResizer.show(cRect, {             156     colResizer.show(cRect, {       

     128       height: tRect.height,              157       height: tRect.height,        

     129     });                                  158     });                            

                                                  159     if (cols.isHide(cRect.ci - 1)) 

                                             {                                           

                                                  160       colResizer.showUnhide(cRect.c

                                             i);                                         

                                                  161     } else {                       

                                                  162       colResizer.hideUnhide();     

                                                  163     }                              

     130   } else {                               164   } else {                         

     131     colResizer.hide();                   165     colResizer.hide();             

     132   }                                      166   }                                

     133 }                                        167 }                                  

     134                                          168                                    

     135 function overlayerMousescroll(evt)       169 function overlayerMousescroll(evt) 

{                                            {                                           

     136   const { verticalScrollbar, data }      170   const { verticalScrollbar, horizo

 = this;                                     ntalScrollbar, data } = this;               

     137   const { top } = verticalScrollbar      171   const { top } = verticalScrollbar

.scroll();                                   .scroll();                                  

                                                  172   const { left } = horizontalScroll

                                             bar.scroll();                               

     138   // console.log('evt:::', evt.whee      173   // console.log('evt:::', evt.whee

lDelta, evt.detail * 40);                    lDelta, evt.detail * 40);                   

     139   let delta = evt.deltaY;                174                                    

     140   const { rows } = data;                 175   const { rows, cols } = data;     

                                                  176                                    

                                                  177   // deltaY for vertical delta     

                                                  178   const { deltaY, deltaX } = evt;  

                                                  179   const loopValue = (ii, vFunc) => 

                                             {                                           

                                                  180     let i = ii;                    

                                                  181     let v = 0;                     

                                                  182     do {                           

                                                  183       v = vFunc(i);                

                                                  184       i += 1;                      

                                                  185     } while (v <= 0);              

                                                  186     return v;                      

                                                  187   };                               

                                                  188   // console.log('deltaX', deltaX, 

                                             'evt.detail', evt.detail);                  

     141   if (evt.detail) delta = evt.detai      189   // if (evt.detail) deltaY = evt.d

l * 40;                                      etail * 40;                                 

     142   if (delta > 0) {                       190   const moveY = (vertical) => {    

                                                  191     if (vertical > 0) {            

     143     // up                                192       // up                        

     144     const ri = data.scroll.ri + 1;       193       const ri = data.scroll.ri + 1

                                             ;                                           

     145     if (ri < rows.len) {                 194       if (ri < rows.len) {         

                                                  195         const rh = loopValue(ri, i 

                                             => rows.getHeight(i));                      

     146       verticalScrollbar.move({ top:      196         verticalScrollbar.move({ to

 top + rows.getHeight(ri) - 1 });            p: top + rh - 1 });                         

     147     }                                    197       }                            

     148   } else {                               198     } else {                       

     149     // down                              199       // down                      

     150     const ri = data.scroll.ri - 1;       200       const ri = data.scroll.ri - 1

                                             ;                                           

     151     if (ri >= 0) {                       201       if (ri >= 0) {               

                                                  202         const rh = loopValue(ri, i 

                                             => rows.getHeight(i));                      

     152       verticalScrollbar.move({ top:      203         verticalScrollbar.move({ to

 ri === 0 ? 0 : top - rows.getHeigh          p: ri === 0 ? 0 : top - rh });              

t(ri) });                                                                                

     153     }                                    204       }                            

                                                  205     }                              

     154   }                                      206   };                               

                                                  207                                    

                                                  208   // deltaX for Mac horizontal scro

                                             ll                                          

                                                  209   const moveX = (horizontal) => {  

                                                  210     if (horizontal > 0) {          

                                                  211       // left                      

                                                  212       const ci = data.scroll.ci + 1

                                             ;                                           

                                                  213       if (ci < cols.len) {         

                                                  214         const cw = loopValue(ci, i 

                                             => cols.getWidth(i));                       

                                                  215         horizontalScrollbar.move({ 

                                             left: left + cw - 1 });                     

                                                  216       }                            

                                                  217     } else {                       

                                                  218       // right                     

                                                  219       const ci = data.scroll.ci - 1

                                             ;                                           

                                                  220       if (ci >= 0) {               

                                                  221         const cw = loopValue(ci, i 

                                             => cols.getWidth(i));                       

                                                  222         horizontalScrollbar.move({ 

                                             left: ci === 0 ? 0 : left - cw });          

                                                  223       }                            

                                                  224     }                              

                                                  225   };                               

                                                  226   const tempY = Math.abs(deltaY);  

                                                  227   const tempX = Math.abs(deltaX);  

                                                  228   const temp = Math.max(tempY, temp

                                             X);                                         

                                                  229                                    

                                                  230   if (temp === tempX) throttle(move

                                             X(deltaX), 50);                             

                                                  231   if (temp === tempY) throttle(move

                                             Y(deltaY), 50);                             

     155 }                                        232 }                                  

     156                                          233                                    

     157 function overlayerTouch(direction,       234 function overlayerTouch(direction, 

distance) {                                  distance) {                                 

     158   const { verticalScrollbar, horizo      235   const { verticalScrollbar, horizo

ntalScrollbar } = this;                      ntalScrollbar } = this;                     

     159   const { top } = verticalScrollbar      236   const { top } = verticalScrollbar

.scroll();                                   .scroll();                                  

     160   const { left } = horizontalScroll      237   const { left } = horizontalScroll

bar.scroll();                                bar.scroll();                               

     161   // console.log('direction:', dire      238                                    

ction, ', distance:', distance, lef                                                      

t);                                                                                      

     162   if (direction === 'left' || direc      239   if (direction === 'left' || direc

tion === 'right') {                          tion === 'right') {                         

     163     horizontalScrollbar.move({ left      240     horizontalScrollbar.move({ left

: left - distance });                        : left - distance });                       

     164   } else if (direction === 'up' ||       241   } else if (direction === 'up' || 

direction === 'down') {                      direction === 'down') {                     

     165     verticalScrollbar.move({ top: t      242     verticalScrollbar.move({ top: t

op - distance });                            op - distance });                           

     166   }                                      243   }                                

     167 }                                        244 }                                  

     168                                          245                                    

     169 function verticalScrollbarSet() {        246 function verticalScrollbarSet() {  

     170   const { data, verticalScrollbar }      247   const { data, verticalScrollbar }

 = this;                                      = this;                                    

     171   const { height } = this.getTableO      248   const { height } = this.getTableO

ffset();                                     ffset();                                    

                                                  249   const erth = data.exceptRowTotalH

                                             eight(0, -1);                               

                                                  250   // console.log('erth:', erth);   

     172   verticalScrollbar.set(height, dat      251   verticalScrollbar.set(height, dat

a.rows.totalHeight());                       a.rows.totalHeight() - erth);               

     173 }                                        252 }                                  

     174                                          253                                    

     175 function horizontalScrollbarSet() {      254 function horizontalScrollbarSet() {

     176   const { data, horizontalScrollbar      255   const { data, horizontalScrollbar

 } = this;                                    } = this;                                  

     177   const { width } = this.getTableOf      256   const { width } = this.getTableOf

fset();                                      fset();                                     

---                                          ---                                         

     191     editor.setFreezeLengths(fwidth,      270     editor.setFreezeLengths(fwidth,

 fheight);                                    fheight);                                  

     192   }                                      271   }                                

     193   selector.resetAreaOffset();            272   selector.resetAreaOffset();      

     194 }                                        273 }                                  

     195                                          274                                    

     196 function dataSync() {  //GUSA                                                   

     197   const {                                                                       

     198     table,                                                                      

     199   } = this;                                                                     

     200   table.render();                                                               

     201 }                                                                               

     202                                                                                 

     203 function sheetReset() {                  275 function sheetReset() {            

     204   const {                                276   const {                          

     205     tableEl,                             277     tableEl,                       

     206     overlayerEl,                         278     overlayerEl,                   

     207     overlayerCEl,                        279     overlayerCEl,                  

     208     table,                               280     table,                         

     209     toolbar,                             281     toolbar,                       

     210     selector,                            282     selector,                      

     211     el,                                  283     el,                            

     212 //    sync_sheet, //GUSA                                                        

     213   } = this;                              284   } = this;                        

     214   const tOffset = this.getTableOffs      285   const tOffset = this.getTableOffs

et();                                        et();                                       

     215   const vRect = this.getRect();          286   const vRect = this.getRect();    

     216   tableEl.attr(vRect);                   287   tableEl.attr(vRect);             

     217   overlayerEl.offset(vRect);             288   overlayerEl.offset(vRect);       

---                                          ---                                         

     221   horizontalScrollbarSet.call(this)      292   horizontalScrollbarSet.call(this)

;                                            ;                                           

     222   sheetFreeze.call(this);                293   sheetFreeze.call(this);          

     223   table.render();                        294   table.render();                  

     224   toolbar.reset();                       295   toolbar.reset();                 

     225   selector.reset();                      296   selector.reset();                

     226 /*                                                                              

     227   //GUSA                                                                        

     228     console.log("sync_sheets !!!");                                             

     229   //GUSA                                                                        

     230   if (this.sync_sheets) { //GUSA                                                

     231     console.log("sync_sheets !!!");                                             

     232     //this.sync_sheets[0].reload();                                             

 //GUSA                                                                                  

     233   }                                                                             

     234  */                                                                             

     235 }                                        297 }                                  

     236                                          298                                    

     237 function clearClipboard() {              299 function clearClipboard() {        

     238   const { data, selector } = this;       300   const { data, selector } = this; 

     239   data.clearClipboard();                 301   data.clearClipboard();           

---                                          ---                                         

     250   const { data, selector } = this;       312   const { data, selector } = this; 

     251   data.cut();                            313   data.cut();                      

     252   selector.showClipboard();              314   selector.showClipboard();        

     253 }                                        315 }                                  

     254                                          316                                    

     255 function paste(what) {                   317 function paste(what, evt) {        

     256   const { data } = this;                 318   const { data } = this;           

     257   if (data.paste(what, msg => xtoas      319   if (data.paste(what, msg => xtoas

t('Tip', msg))) {                            t('Tip', msg))) {                           

     258     sheetReset.call(this);               320     sheetReset.call(this);         

                                                  321   } else if (evt) {                

                                                  322     const cdata = evt.clipboardData

                                             .getData('text/plain');                     

                                                  323     this.data.pasteFromText(cdata);

                                                  324     sheetReset.call(this);         

     259   }                                      325   }                                

                                                  326 }                                  

                                                  327                                    

                                                  328 function hideRowsOrCols() {        

                                                  329   this.data.hideRowsOrCols();      

                                                  330   sheetReset.call(this);           

                                                  331 }                                  

                                                  332                                    

                                                  333 function unhideRowsOrCols(type, ind

                                             ex) {                                       

                                                  334   this.data.unhideRowsOrCols(type, 

                                             index);                                     

                                                  335   sheetReset.call(this);           

     260 }                                        336 }                                  

     261                                          337                                    

     262 function autofilter() {                  338 function autofilter() {            

     263   const { data } = this;                 339   const { data } = this;           

     264   data.autofilter();                     340   data.autofilter();               

---                                          ---                                         

     370     editorSetOffset.call(this);          446     editorSetOffset.call(this);    

     371     table.render();                      447     table.render();                

     372   });                                    448   });                              

     373 }                                        449 }                                  

     374                                          450                                    

     375 function sync_verticalScrollbarMove                                             

(distance) {                                                                             

     376   const { data, table, selector } =                                             

 this;                                                                                   

     377   data.sync_scrolly(distance, () =>                                             

 {                                                                                       

     378     selector.resetBRLAreaOffset();                                              

     379     editorSetOffset.call(this);                                                 

     380     table.render();                                                             

     381   });                                                                           

     382 }                                                                               

     383                                                                                 

     384 function sync_horizontalScrollbarMo                                             

ve(distance) {                                                                           

     385   const { data, table, selector } =                                             

 this;                                                                                   

     386   data.sync_scrollx(distance, () =>                                             

 {                                                                                       

     387     selector.resetBRTAreaOffset();                                              

     388     editorSetOffset.call(this);                                                 

     389     table.render();                                                             

     390   });                                                                           

     391 }                                                                               

     392                                                                                 

     393 /*                                                                              

     394 function sync_shape_layer_move() {                                              

     395   const { data, table, selector } =                                             

 this;                                                                                   

     396     table.sync_move_laerd_cell();                                               

     397                                                                                 

     398 }                                                                               

     399 */                                                                              

     400                                                                                 

     401 function rowResizerFinished(cRect,       451 function rowResizerFinished(cRect, 

distance) {                                  distance) {                                 

     402   const { ri } = cRect;                  452   const { ri } = cRect;            

     403   const { table, selector, data } =      453   const { table, selector, data } =

 this;                                        this;                                      

     404   data.rows.setHeight(ri, distance)      454   data.rows.setHeight(ri, distance)

;                                            ;                                           

     405   data.setRowHeight(ri, distance);                                              

 //GUSA                                                                                  

     406   table.render();                        455   table.render();                  

     407   selector.resetAreaOffset();            456   selector.resetAreaOffset();      

     408   verticalScrollbarSet.call(this);       457   verticalScrollbarSet.call(this); 

     409   editorSetOffset.call(this);            458   editorSetOffset.call(this);      

     410 }                                        459 }                                  

     411                                          460                                    

     412 function colResizerFinished(cRect,       461 function colResizerFinished(cRect, 

distance) {                                  distance) {                                 

     413   const { ci } = cRect;                  462   const { ci } = cRect;            

     414   const { table, selector, data } =      463   const { table, selector, data } =

 this;                                        this;                                      

     415   data.cols.setWidth(ci, distance);      464   data.cols.setWidth(ci, distance);

     416   data.setColWidth(ci, distance); /                                             

/GUSA                                                                                    

     417   // console.log('data:', data);         465   // console.log('data:', data);   

     418   table.render();                        466   table.render();                  

     419   selector.resetAreaOffset();            467   selector.resetAreaOffset();      

     420   horizontalScrollbarSet.call(this)      468   horizontalScrollbarSet.call(this)

;                                            ;                                           

     421   editorSetOffset.call(this);            469   editorSetOffset.call(this);      

---                                          ---                                         

     423                                          471                                    

     424 function dataSetCellText(text, stat      472 function dataSetCellText(text, stat

e = 'finished') {                            e = 'finished') {                           

     425   const { data, table } = this;          473   const { data, table } = this;    

     426   // const [ri, ci] = selector.inde      474   // const [ri, ci] = selector.inde

xes;                                         xes;                                        

     427   data.setSelectedCellText(text, st      475   data.setSelectedCellText(text, st

ate);                                        ate);                                       

     428   if (state === 'finished') table.r      476   if (state === 'finished') {      

ender();                                                                                 

                                                  477     const { ri, ci } = data.selecto

                                             r;                                          

                                                  478     this.trigger('cell-edited', tex

                                             t, ri, ci);                                 

                                                  479     table.render();                

                                                  480   }                                

     429 }                                        481 }                                  

     430                                          482                                    

     431 function insertDeleteRowColumn(type      483 function insertDeleteRowColumn(type

) {                                          ) {                                         

     432   const { data } = this;                 484   const { data } = this;           

     433   if (type === 'insert-row') {           485   if (type === 'insert-row') {     

---                                          ---                                         

     442     data.deleteCell();                   494     data.deleteCell();             

     443   } else if (type === 'delete-cell-      495   } else if (type === 'delete-cell-

format') {                                   format') {                                  

     444     data.deleteCell('format');           496     data.deleteCell('format');     

     445   } else if (type === 'delete-cell-      497   } else if (type === 'delete-cell-

text') {                                     text') {                                    

     446     data.deleteCell('text');             498     data.deleteCell('text');       

                                                  499   } else if (type === 'cell-printab

                                             le') {                                      

                                                  500     data.setSelectedCellAttr('print

                                             able', true);                               

                                                  501   } else if (type === 'cell-non-pri

                                             ntable') {                                  

                                                  502     data.setSelectedCellAttr('print

                                             able', false);                              

                                                  503   } else if (type === 'cell-editabl

                                             e') {                                       

                                                  504     data.setSelectedCellAttr('edita

                                             ble', true);                                

                                                  505   } else if (type === 'cell-non-edi

                                             table') {                                   

                                                  506     data.setSelectedCellAttr('edita

                                             ble', false);                               

     447   }                                      507   }                                

     448   clearClipboard.call(this);             508   clearClipboard.call(this);       

     449   sheetReset.call(this);                 509   sheetReset.call(this);           

     450 }                                        510 }                                  

     451                                          511                                    

---                                          ---                                         

     454   if (type === 'undo') {                 514   if (type === 'undo') {           

     455     this.undo();                         515     this.undo();                   

     456   } else if (type === 'redo') {          516   } else if (type === 'redo') {    

     457     this.redo();                         517     this.redo();                   

     458   } else if (type === 'print') {         518   } else if (type === 'print') {   

     459     // print                             519     this.print.preview();          

     460   } else if (type === 'paintformat'      520   } else if (type === 'paintformat'

) {                                          ) {                                         

     461     if (value === true) copy.call(t      521     if (value === true) copy.call(t

his);                                        his);                                       

     462     else clearClipboard.call(this);      522     else clearClipboard.call(this);

     463   } else if (type === 'clearformat'      523   } else if (type === 'clearformat'

) {                                          ) {                                         

     464     insertDeleteRowColumn.call(this      524     insertDeleteRowColumn.call(this

, 'delete-cell-format');                     , 'delete-cell-format');                    

---                                          ---                                         

     474       const { ri, ci } = data.selec      534       const { ri, ci } = data.selec

tor;                                         tor;                                        

     475       this.freeze(ri, ci);               535       this.freeze(ri, ci);         

     476     } else {                             536     } else {                       

     477       this.freeze(0, 0);                 537       this.freeze(0, 0);           

     478     }                                    538     }                              

     479   } else if (type === 'overlayer')                                              

{                                                                                        

     480      this.enableOverlayer(value);                                               

     481   } else {                               539   } else {                         

     482     data.setSelectedCellAttr(type,       540     data.setSelectedCellAttr(type, 

value);                                      value);                                     

     483     if (type === 'formula') {            541     if (type === 'formula' && !data

                                             .selector.multiple()) {                     

     484       editorSet.call(this);              542       editorSet.call(this);        

     485     }                                    543     }                              

     486     sheetReset.call(this);               544     sheetReset.call(this);         

     487   }                                      545   }                                

     488 }                                        546 }                                  

---                                          ---                                         

     493   sheetReset.call(this);                 551   sheetReset.call(this);           

     494 }                                        552 }                                  

     495                                          553                                    

     496 function sheetInitEvents() {             554 function sheetInitEvents() {       

     497   const {                                555   const {                          

                                                  556     selector,                      

     498     overlayerEl,                         557     overlayerEl,                   

     499     rowResizer,                          558     rowResizer,                    

     500     colResizer,                          559     colResizer,                    

     501     verticalScrollbar,                   560     verticalScrollbar,             

     502     horizontalScrollbar,                 561     horizontalScrollbar,           

---                                          ---                                         

     526         editorSet.call(this);            585         editorSet.call(this);      

     527       } else {                           586       } else {                     

     528         editor.clear();                  587         editor.clear();            

     529         overlayerMousedown.call(thi      588         overlayerMousedown.call(thi

s, evt);                                     s, evt);                                    

     530       }                                  589       }                            

                                                  590     })                             

     531     }).on('mousewheel.stop', (evt)       591     .on('mousewheel.stop', (evt) =>

=> {                                          {                                          

     532       overlayerMousescroll.call(thi      592       overlayerMousescroll.call(thi

s, evt);                                     s, evt);                                    

                                                  593     })                             

                                                  594     .on('mouseout', (evt) => {     

                                                  595       const { offsetX, offsetY } = 

                                             evt;                                        

                                                  596       if (offsetY <= 0) colResizer.

                                             hide();                                     

                                                  597       if (offsetX <= 0) rowResizer.

                                             hide();                                     

     533     });                                  598     });                            

                                                  599                                    

                                                  600   selector.inputChange = (v) => {  

                                                  601     dataSetCellText.call(this, v, '

                                             input');                                    

                                                  602     editorSet.call(this);          

                                                  603   };                               

     534                                          604                                    

     535   // slide on mobile                     605   // slide on mobile               

     536   bindTouch(overlayerEl.el, {            606   bindTouch(overlayerEl.el, {      

     537     move: (direction, d) => {            607     move: (direction, d) => {      

     538       overlayerTouch.call(this, dir      608       overlayerTouch.call(this, dir

ection, d);                                  ection, d);                                 

---                                          ---                                         

     549   rowResizer.finishedFn = (cRect, d      619   rowResizer.finishedFn = (cRect, d

istance) => {                                istance) => {                               

     550     rowResizerFinished.call(this, c      620     rowResizerFinished.call(this, c

Rect, distance);                             Rect, distance);                            

     551   };                                     621   };                               

     552   colResizer.finishedFn = (cRect, d      622   colResizer.finishedFn = (cRect, d

istance) => {                                istance) => {                               

     553     colResizerFinished.call(this, c      623     colResizerFinished.call(this, c

Rect, distance);                             Rect, distance);                            

                                                  624   };                               

                                                  625   // resizer unhide callback       

                                                  626   rowResizer.unhideFn = (index) => 

                                             {                                           

                                                  627     unhideRowsOrCols.call(this, 'ro

                                             w', index);                                 

                                                  628   };                               

                                                  629   colResizer.unhideFn = (index) => 

                                             {                                           

                                                  630     unhideRowsOrCols.call(this, 'co

                                             l', index);                                 

     554   };                                     631   };                               

     555   // scrollbar move callback             632   // scrollbar move callback       

     556   verticalScrollbar.moveFn = (dista      633   verticalScrollbar.moveFn = (dista

nce, evt) => {                               nce, evt) => {                              

     557     verticalScrollbarMove.call(this      634     verticalScrollbarMove.call(this

, distance, evt);                            , distance, evt);                           

     558   };                                     635   };                               

---                                          ---                                         

     584       paste.call(this, 'all');           661       paste.call(this, 'all');     

     585     } else if (type === 'paste-valu      662     } else if (type === 'paste-valu

e') {                                        e') {                                       

     586       paste.call(this, 'text');          663       paste.call(this, 'text');    

     587     } else if (type === 'paste-form      664     } else if (type === 'paste-form

at') {                                       at') {                                      

     588       paste.call(this, 'format');        665       paste.call(this, 'format');  

                                                  666     } else if (type === 'hide') {  

                                                  667       hideRowsOrCols.call(this);   

     589     } else {                             668     } else {                       

     590       insertDeleteRowColumn.call(th      669       insertDeleteRowColumn.call(th

is, type);                                   is, type);                                  

     591     }                                    670     }                              

     592   };                                     671   };                               

     593                                          672                                    

---                                          ---                                         

     595     this.reload();                       674     this.reload();                 

     596   });                                    675   });                              

     597                                          676                                    

     598   bind(window, 'click', (evt) => {       677   bind(window, 'click', (evt) => { 

     599     this.focusing = overlayerEl.con      678     this.focusing = overlayerEl.con

tains(evt.target);                           tains(evt.target);                          

                                                  679   });                              

                                                  680                                    

                                                  681   bind(window, 'paste', (evt) => { 

                                                  682     paste.call(this, 'all', evt);  

                                                  683     evt.preventDefault();          

     600   });                                    684   });                              

     601                                          685                                    

     602   // for selector                        686   // for selector                  

     603   bind(window, 'keydown', (evt) =>       687   bind(window, 'keydown', (evt) => 

{                                            {                                           

     604     if (!this.focusing) return;          688     if (!this.focusing) return;    

---                                          ---                                         

     607       key, ctrlKey, shiftKey, altKe      691       key, ctrlKey, shiftKey, altKe

y, metaKey,                                  y, metaKey,                                 

     608     } = evt;                             692     } = evt;                       

     609     // console.log('keydown.evt: ',      693     // console.log('keydown.evt: ',

 keyCode);                                    keyCode);                                  

     610     if (ctrlKey || metaKey) {            694     if (ctrlKey || metaKey) {      

     611       // const { sIndexes, eIndexes      695       // const { sIndexes, eIndexes

 } = selector;                                } = selector;                              

     612       let what = 'all';                  696       // let what = 'all';         

     613       if (shiftKey) what = 'text';       697       // if (shiftKey) what = 'text

                                             ';                                          

     614       if (altKey) what = 'format';       698       // if (altKey) what = 'format

                                             ';                                          

     615       switch (keyCode) {                 699       switch (keyCode) {           

     616         case 90:                         700         case 90:                   

     617           // undo: ctrl + z              701           // undo: ctrl + z        

     618           this.undo();                   702           this.undo();             

     619           evt.preventDefault();          703           evt.preventDefault();    

---                                          ---                                         

     638           toolbar.trigger('underlin      722           toolbar.trigger('underlin

e');                                         e');                                        

     639           evt.preventDefault();          723           evt.preventDefault();    

     640           break;                         724           break;                   

     641         case 86:                         725         case 86:                   

     642           // ctrl + v                    726           // ctrl + v              

     643           paste.call(this, what);        727           // => paste              

     644           evt.preventDefault();          728           // evt.preventDefault(); 

     645           break;                         729           break;                   

     646         case 37:                         730         case 37:                   

     647           // ctrl + left                 731           // ctrl + left           

     648           selectorMove.call(this, s      732           selectorMove.call(this, s

hiftKey, 'row-first');                       hiftKey, 'row-first');                      

     649           evt.preventDefault();          733           evt.preventDefault();    

---                                          ---                                         

     668           selectorSet.call(this, fa      752           selectorSet.call(this, fa

lse, -1, data.selector.ci, false);           lse, -1, data.selector.ci, false);          

     669           evt.preventDefault();          753           evt.preventDefault();    

     670           break;                         754           break;                   

     671         case 66:                         755         case 66:                   

     672           // ctrl + B                    756           // ctrl + B              

     673           toolbar.trigger('font-bol      757           toolbar.trigger('bold'); 

d');                                                                                     

     674           break;                         758           break;                   

     675         case 73:                         759         case 73:                   

     676           // ctrl + I                    760           // ctrl + I              

     677           toolbar.trigger('font-ita      761           toolbar.trigger('italic')

lic');                                       ;                                           

     678           break;                         762           break;                   

     679         default:                         763         default:                   

     680           break;                         764           break;                   

     681       }                                  765       }                            

     682 /*                                                                              

     683     } else if (altKey) {                                                        

     684       switch (keyCode) {                                                        

     685         case 13:                                                                

     686         dataSetCellText.call(this,                                              

evt.key, 'input');                                                                       

     687         editorSet.call(this);                                                   

     688             break;                                                              

     689       }                                                                         

     690 */                                                                              

     691     } else {                             766     } else {                       

     692       // console.log('evt.keyCode:'      767       // console.log('evt.keyCode:'

, evt.keyCode);                              , evt.keyCode);                             

     693       switch (keyCode) {                 768       switch (keyCode) {           

     694         case 32:                         769         case 32:                   

     695           if (shiftKey) {                770           if (shiftKey) {          

---                                          ---                                         

     721           editor.clear();                796           editor.clear();          

     722           // shift + tab => move le      797           // shift + tab => move le

ft                                           ft                                          

     723           // tab => move right           798           // tab => move right     

     724           selectorMove.call(this, f      799           selectorMove.call(this, f

alse, shiftKey ? 'left' : 'right');          alse, shiftKey ? 'left' : 'right');         

     725           evt.preventDefault();          800           evt.preventDefault();    

     726         break;                           801           break;                   

     727                                                                                 

     728         case 13: // enter                802         case 13: // enter          

     729           if (!altKey) {                 803           if (altKey) {            

                                                  804             const c = data.getSelec

                                             tedCell();                                  

                                                  805             const ntxt = c.text || 

                                             '';                                         

                                                  806             dataSetCellText.call(th

                                             is, `${ntxt}\n`, 'input');                  

                                                  807             editorSet.call(this);  

                                                  808             break;                 

                                                  809           }                        

     730           editor.clear();                810           editor.clear();          

     731           // shift + enter => move       811           // shift + enter => move 

up                                           up                                          

     732           // enter => move down          812           // enter => move down    

     733           selectorMove.call(this, f      813           selectorMove.call(this, f

alse, shiftKey ? 'up' : 'down');             alse, shiftKey ? 'up' : 'down');            

     734           evt.preventDefault();          814           evt.preventDefault();    

     735           }                                                                     

     736           break;                         815           break;                   

     737                                                                                 

     738         case 8: // backspace             816         case 8: // backspace       

     739           insertDeleteRowColumn.cal      817           insertDeleteRowColumn.cal

l(this, 'delete-cell-text');                 l(this, 'delete-cell-text');                

     740           evt.preventDefault();          818           evt.preventDefault();    

     741           break;                         819           break;                   

     742         default:                         820         default:                   

---                                          ---                                         

     761   });                                    839   });                              

     762 }                                        840 }                                  

     763                                          841                                    

     764 export default class Sheet {             842 export default class Sheet {       

     765   constructor(targetEl, data) {          843   constructor(targetEl, data) {    

                                                  844     this.eventMap = new Map();     

     766     const { view, showToolbar, show      845     const { view, showToolbar, show

Contextmenu } = data.settings;               Contextmenu } = data.settings;              

     767     this.el = h('div', `${cssPrefix      846     this.el = h('div', `${cssPrefix

}-sheet`);                                   }-sheet`);                                  

     768     this.toolbar = new Toolbar(data      847     this.toolbar = new Toolbar(data

, view.width, !showToolbar);                 , view.width, !showToolbar);                

                                                  848     this.print = new Print(data);  

     769     targetEl.children(this.toolbar.      849     targetEl.children(this.toolbar.

el, this.el);                                el, this.el, this.print.el);                

     770     this.data = data;                    850     this.data = data;              

     771     // table                             851     // table                       

     772     //this.tableEl = h('canvas', `$      852     this.tableEl = h('canvas', `${c

{cssPrefix}-table`);                         ssPrefix}-table`);                          

     773     this.tableEl = h('div', `${cssP                                             

refix}-table`);                                                                          

     774     // resizer                           853     // resizer                     

     775     this.rowResizer = new Resizer(f      854     this.rowResizer = new Resizer(f

alse, data.rows.height);                     alse, data.rows.height);                    

     776     this.colResizer = new Resizer(t      855     this.colResizer = new Resizer(t

rue, data.cols.minWidth);                    rue, data.cols.minWidth);                   

     777     // scrollbar                         856     // scrollbar                   

     778     this.verticalScrollbar = new Sc      857     this.verticalScrollbar = new Sc

rollbar(true);                               rollbar(true);                              

---                                          ---                                         

     784       data.rows.height,                  863       data.rows.height,            

     785     );                                   864     );                             

     786     // data validation                   865     // data validation             

     787     this.modalValidation = new Moda      866     this.modalValidation = new Moda

lValidation();                               lValidation();                              

     788     // contextMenu                       867     // contextMenu                 

     789     this.contextMenu = new ContextM      868     this.contextMenu = new ContextM

enu(() => this.getTableOffset(), !s          enu(() => this.getRect(), !showCont         

howContextmenu);                             extmenu);                                   

     790     // selector                          869     // selector                    

     791     this.selector = new Selector(da      870     this.selector = new Selector(da

ta);                                         ta);                                        

     792                                                                                 

     793     this.overlayerCEl = h('div', `$      871     this.overlayerCEl = h('div', `$

{cssPrefix}-overlayer-content`)              {cssPrefix}-overlayer-content`)             

     794       .children(                         872       .children(                   

     795         this.editor.el,                  873         this.editor.el,            

     796         this.selector.el,                874         this.selector.el,          

     797       );                                 875       );                           

     798     this.overlayerEl = h('div', `${      876     this.overlayerEl = h('div', `${

cssPrefix}-overlayer`)                       cssPrefix}-overlayer`)                      

     799       .child(this.overlayerCEl);         877       .child(this.overlayerCEl);   

     800                                                                                 

     801     // sortFilter                        878     // sortFilter                  

     802     this.sortFilter = new SortFilte      879     this.sortFilter = new SortFilte

r();                                         r();                                        

     803     // root element                      880     // root element                

     804     this.el.children(                    881     this.el.children(              

     805       this.tableEl,                      882       this.tableEl,                

---                                          ---                                         

     813       this.sortFilter.el,                890       this.sortFilter.el,          

     814     );                                   891     );                             

     815     // table                             892     // table                       

     816     this.table = new Table(this.tab      893     this.table = new Table(this.tab

leEl.el, data);                              leEl.el, data);                             

     817     sheetInitEvents.call(this);          894     sheetInitEvents.call(this);    

     818                                                                                 

     819     //this.overlayerEl.hide();//GUS                                             

A                                                                                        

     820                                                                                 

     821     sheetReset.call(this);               895     sheetReset.call(this);         

     822                                                                                 

     823     //this.table.layerRender(); //G                                             

USA TEST                                                                                 

     824     //                                                                          

     825     // init selector [0, 0]              896     // init selector [0, 0]        

     826     selectorSet.call(this, false, 0      897     selectorSet.call(this, false, 0

, 0);                                        , 0);                                       

     827     //this.sync_sheets = new Array(      898   }                                

); //GUSA                                                                                

     828     this.sync_sheets = []; //GUSA        899                                    

                                                  900   on(eventName, func) {            

                                                  901     this.eventMap.set(eventName, fu

                                             nc);                                        

                                                  902     return this;                   

                                                  903   }                                

                                                  904                                    

                                                  905   trigger(eventName, ...args) {    

                                                  906     const { eventMap } = this;     

                                                  907     if (eventMap.has(eventName)) { 

                                                  908       eventMap.get(eventName).call(

                                             this, ...args);                             

     829   }                                      909     }                              

     830                                                                                 

     831   exportData() {                                                                

     832     return this.data.getData();                                                 

     833                                                                                 

     834   }                                      910   }                                

     835                                          911                                    

     836   setLayer() {                           912   resetData(data) {                

     837     this.table.setlayer(); //GUSA T      913     this.data = data;              

EST                                                                                      

                                                  914     this.toolbar.resetData(data);  

                                                  915     this.print.resetData(data);    

                                                  916     this.selector.resetData(data); 

                                                  917     this.table.resetData(data);    

     838   }                                      918   }                                

     839                                          919                                    

     840   loadData(data) {                       920   loadData(data) {                 

     841     this.data.setData(data);             921     this.data.setData(data);       

     842     this.setLayer();                                                            

     843     sheetReset.call(this);               922     sheetReset.call(this);         

     844     console.log("loadData end");                                                

     845     return this;                         923     return this;                   

     846   }                                      924   }                                

     847                                          925                                    

     848   /*                                                                            

     849   addSyncSheet(sheet) {  //GUSA                                                 

     850     //this.sync_sheet.push(sheet);                                              

     851     this.sync_sheets[0]= sheet;                                                 

     852                                                                                 

     853   }                                                                             

     854   */                                                                            

     855   // freeze rows or cols                 926   // freeze rows or cols           

     856   freeze(ri, ci) {                       927   freeze(ri, ci) {                 

     857     const { data } = this;               928     const { data } = this;         

     858     data.setFreeze(ri, ci);              929     data.setFreeze(ri, ci);        

     859     sheetReset.call(this);               930     sheetReset.call(this);         

---                                          ---                                         

     873   reload() {                             944   reload() {                       

     874     sheetReset.call(this);               945     sheetReset.call(this);         

     875     return this;                         946     return this;                   

     876   }                                      947   }                                

     877                                          948                                    

     878   sync() {  //GUSA                                                              

     879     dataSync.call(this);                                                        

     880     //sheetReset.call(this);                                                    

     881                                                                                 

     882   }                                                                             

     883   sync_movex(x) {                                                               

     884     sync_horizontalScrollbarMove.ca                                             

ll(this,x);                                                                              

     885   }                                                                             

     886                                                                                 

     887   sync_movey(y) {                                                               

     888     sync_verticalScrollbarMove.call                                             

(this,y);                                                                                

     889   }                                                                             

     890 /*                                                                              

     891   sync_shape_layer() {                                                          

     892     sync_shape_layer_move(this);                                                

     893   }                                                                             

     894   */                                                                            

     895   getRect() {                            949   getRect() {                      

     896     const { data } = this;               950     const { data } = this;         

     897     return { width: data.viewWidth(      951     return { width: data.viewWidth(

), height: data.viewHeight() };              ), height: data.viewHeight() };             

     898   }                                      952   }                                

     899                                          953                                    

---                                          ---                                         

     905       height: height - rows.height,      959       height: height - rows.height,

     906       left: cols.indexWidth,             960       left: cols.indexWidth,       

     907       top: rows.height,                  961       top: rows.height,            

     908     };                                   962     };                             

     909   }                                      963   }                                

     910                                                                                 

     911   enableOverlayer(flag) {  //GUSA                                               

     912     if (flag) {                                                                 

     913       this.overlayerEl.show();//GUS                                             

A                                                                                        

     914     } else {                                                                    

     915       this.overlayerEl.hide();//GUS                                             

A                                                                                        

     916     }                                                                           

     917   }                                                                             

     918 }                                        964 }                                  

```

##  ../src/component/sort_filter.js  ->  ../../x-spreadsheet/src/component/sort_filter.js  
```
```

##  ../src/component/suggest.js  ->  ../../x-spreadsheet/src/component/suggest.js  
```
```

##  ../src/component/table.js  ->  ../../x-spreadsheet/src/component/table.js  
```
../src/component/table.js                    ../../x-spreadsheet/src/component/table.js  

      24     lineWidth: thinLineWidth(),           24     lineWidth: thinLineWidth(),    

      25     strokeStyle: '#e6e6e6',               25     strokeStyle: '#e6e6e6',        

      26   };                                      26   };                               

      27 }                                         27 }                                  

      28                                           28                                    

      29 function getDrawBox(rindex, cindex)       29 function getDrawBox(data, rindex, c

 {                                           index, yoffset = 0) {                       

      30   const { data } = this;                                                        

      31   const {                                 30   const {                          

      32     left, top, width, height,             31     left, top, width, height,      

      33   } = data.cellRect(rindex, cindex)       32   } = data.cellRect(rindex, cindex)

;                                            ;                                           

      34   return new DrawBox(left, top, wid       33   return new DrawBox(left, top + yo

th, height, cellPaddingWidth);               ffset, width, height, cellPaddingWi         

                                             dth);                                       

      35 }                                         34 }                                  

      36 /*                                        35 /*                                 

      37 function renderCellBorders(bboxes,        36 function renderCellBorders(bboxes, 

translateFunc) {                             translateFunc) {                            

      38   const { draw } = this;                  37   const { draw } = this;           

      39   if (bboxes) {                           38   if (bboxes) {                    

---                                          ---                                         

      48     });                                   47     });                            

      49   }                                       48   }                                

      50 }                                         49 }                                  

      51 */                                        50 */                                 

      52                                           51                                    

      53 function renderCell(rindex, cindex)       52 export function renderCell(draw, da

 {                                           ta, rindex, cindex, yoffset = 0) {          

      54   const { draw, data } = this;                                                  

      55   const { sortedRowMap } = data;          53   const { sortedRowMap, rows, cols 

                                             } = data;                                   

                                                   54   if (rows.isHide(rindex) || cols.i

                                             sHide(cindex)) return;                      

      56   let nrindex = rindex;                   55   let nrindex = rindex;            

      57   if (sortedRowMap.has(rindex)) {         56   if (sortedRowMap.has(rindex)) {  

      58     nrindex = sortedRowMap.get(rind       57     nrindex = sortedRowMap.get(rind

ex);                                         ex);                                        

      59   }                                       58   }                                

      60                                           59                                    

      61   const cell = data.getCell(nrindex       60   const cell = data.getCell(nrindex

, cindex);                                   , cindex);                                  

      62   if (cell === null) return;              61   if (cell === null) return;       

                                                   62   let frozen = false;              

                                                   63   if ('editable' in cell && cell.ed

                                             itable === false) {                         

                                                   64     frozen = true;                 

                                                   65   }                                

      63                                           66                                    

      64   const style = data.getCellStyleOr       67   const style = data.getCellStyleOr

Default(nrindex, cindex);                    Default(nrindex, cindex);                   

      65   // console.log('style:', style);                                              

      66   const dbox = getDrawBox.call(this       68   const dbox = getDrawBox(data, rin

, rindex, cindex);                           dex, cindex, yoffset);                      

      67   dbox.bgcolor = style.bgcolor;           69   dbox.bgcolor = style.bgcolor;    

      68   if (style.border !== undefined) {       70   if (style.border !== undefined) {

      69     dbox.setBorders(style.border);        71     dbox.setBorders(style.border); 

      70     // bboxes.push({ ri: rindex, ci       72     // bboxes.push({ ri: rindex, ci

: cindex, box: dbox });                      : cindex, box: dbox });                     

      71     draw.strokeBorders(dbox);             73     draw.strokeBorders(dbox);      

---                                          ---                                         

      92     const error = data.validations.       94     const error = data.validations.

getError(rindex, cindex);                    getError(rindex, cindex);                   

      93     if (error) {                          95     if (error) {                   

      94       // console.log('error:', rind       96       // console.log('error:', rind

ex, cindex, error);                          ex, cindex, error);                         

      95       draw.error(dbox);                   97       draw.error(dbox);            

      96     }                                     98     }                              

                                                   99     if (frozen) {                  

                                                  100       draw.frozen(dbox);           

                                                  101     }                              

      97   });                                    102   });                              

      98 }                                        103 }                                  

      99                                          104                                    

     100 function renderAutofilter(viewRange      105 function renderAutofilter(viewRange

) {                                          ) {                                         

     101   const { data, draw } = this;           106   const { data, draw } = this;     

---                                          ---                                         

     103     const { autoFilter } = data;         108     const { autoFilter } = data;   

     104     if (!autoFilter.active()) retur      109     if (!autoFilter.active()) retur

n;                                           n;                                          

     105     const afRange = autoFilter.hran      110     const afRange = autoFilter.hran

ge();                                        ge();                                       

     106     if (viewRange.intersects(afRang      111     if (viewRange.intersects(afRang

e)) {                                        e)) {                                       

     107       afRange.each((ri, ci) => {         112       afRange.each((ri, ci) => {   

     108         const dbox = getDrawBox.cal      113         const dbox = getDrawBox(dat

l(this, ri, ci);                             a, ri, ci);                                 

     109         draw.dropdown(dbox);             114         draw.dropdown(dbox);       

     110       });                                115       });                          

     111     }                                    116     }                              

     112   }                                      117   }                                

     113 }                                        118 }                                  

---                                          ---                                         

     117   draw.save();                           122   draw.save();                     

     118   draw.translate(fw, fh)                 123   draw.translate(fw, fh)           

     119     .translate(tx, ty);                  124     .translate(tx, ty);            

     120                                          125                                    

     121   const { exceptRowSet } = data;         126   const { exceptRowSet } = data;   

                                                  127   // const exceptRows = Array.from(

                                             exceptRowSet);                              

     122   const filteredTranslateFunc = (ri      128   const filteredTranslateFunc = (ri

) => {                                       ) => {                                      

     123     const ret = exceptRowSet.has(ri      129     const ret = exceptRowSet.has(ri

);                                           );                                          

     124     if (ret) {                           130     if (ret) {                     

     125       const height = data.rows.getH      131       const height = data.rows.getH

eight(ri);                                   eight(ri);                                  

     126       draw.translate(0, -height);        132       draw.translate(0, -height);  

     127     }                                    133     }                              

     128     return !ret;                         134     return !ret;                   

     129   };                                     135   };                               

                                                  136                                    

                                                  137   const exceptRowTotalHeight = data

                                             .exceptRowTotalHeight(viewRange.sri         

                                             , viewRange.eri);                           

     130   // 1 render cell                       138   // 1 render cell                 

     131   // let bboxes = [];                                                           

     132   draw.save();                           139   draw.save();                     

                                                  140   draw.translate(0, -exceptRowTotal

                                             Height);                                    

     133   viewRange.each((ri, ci) => {           141   viewRange.each((ri, ci) => {     

     134     renderCell.call(this, ri, ci);       142     renderCell(draw, data, ri, ci);

     135   }, ri => filteredTranslateFunc(ri      143   }, ri => filteredTranslateFunc(ri

));                                          ));                                         

     136   draw.restore();                        144   draw.restore();                  

     137                                          145                                    

     138   // 2 render cell border                                                       

     139   // draw.save();                                                               

     140   // renderCellBorders.call(this, b                                             

boxes, (ri) => filteredTranslateFun                                                      

c(ri));                                                                                  

     141   // draw.restore();                                                            

     142                                          146                                    

     143   // / bboxes = [];                                                             

     144   // 3 render mergeCell                  147   // 2 render mergeCell            

     145   const rset = new Set();                148   const rset = new Set();          

     146   draw.save();                           149   draw.save();                     

                                                  150   draw.translate(0, -exceptRowTotal

                                             Height);                                    

     147   data.eachMergesInView(viewRange,       151   data.eachMergesInView(viewRange, 

({ sri, sci, eri }) => {                     ({ sri, sci, eri }) => {                    

     148     if (!exceptRowSet.has(sri)) {        152     if (!exceptRowSet.has(sri)) {  

     149       renderCell.call(this, sri, sc      153       renderCell(draw, data, sri, s

i);                                          ci);                                        

     150     } else if (!rset.has(sri)) {         154     } else if (!rset.has(sri)) {   

     151       rset.add(sri);                     155       rset.add(sri);               

     152       const height = data.rows.sumH      156       const height = data.rows.sumH

eight(sri, eri + 1);                         eight(sri, eri + 1);                        

     153       draw.translate(0, -height);        157       draw.translate(0, -height);  

     154     }                                    158     }                              

     155   });                                    159   });                              

     156   draw.restore();                        160   draw.restore();                  

     157                                          161                                    

     158   // 4 render mergeCell border                                                  

     159   // draw.save();                                                               

     160   // renderCellBorders.call(this, b                                             

boxes, (ri) => filteredTranslateFun                                                      

c(ri));                                                                                  

     161   // draw.restore();                                                            

     162                                                                                 

     163   // 5 render autofilter                 162   // 3 render autofilter           

     164   renderAutofilter.call(this, viewR      163   renderAutofilter.call(this, viewR

ange);                                       ange);                                      

     165                                          164                                    

     166   draw.restore();                        165   draw.restore();                  

     167 }                                        166 }                                  

     168                                          167                                    

---                                          ---                                         

     208       draw.line([0, y], [w, y]);         207       draw.line([0, y], [w, y]);   

     209       if (sri <= ii && ii < eri + 1      208       if (sri <= ii && ii < eri + 1

) {                                          ) {                                         

     210         renderSelectedHeaderCell.ca      209         renderSelectedHeaderCell.ca

ll(this, 0, y, w, rowHeight);                ll(this, 0, y, w, rowHeight);               

     211       }                                  210       }                            

     212       draw.fillText(ii + 1, w / 2,       211       draw.fillText(ii + 1, w / 2, 

y + (rowHeight / 2));                        y + (rowHeight / 2));                       

                                                  212       if (i > 0 && data.rows.isHide

                                             (i - 1)) {                                  

                                                  213         draw.save();               

                                                  214         draw.attr({ strokeStyle: '#

                                             c6c6c6' });                                 

                                                  215         draw.line([5, y + 5], [w - 

                                             5, y + 5]);                                 

                                                  216         draw.restore();            

                                                  217       }                            

     213     });                                  218     });                            

     214     draw.line([0, sumHeight + nty],      219     draw.line([0, sumHeight + nty],

 [w, sumHeight + nty]);                       [w, sumHeight + nty]);                     

     215     draw.line([w, nty], [w, sumHeig      220     draw.line([w, nty], [w, sumHeig

ht + nty]);                                  ht + nty]);                                 

     216   }                                      221   }                                

     217   // x-header-text                       222   // x-header-text                 

---                                          ---                                         

     222       draw.line([x, 0], [x, h]);         227       draw.line([x, 0], [x, h]);   

     223       if (sci <= ii && ii < eci + 1      228       if (sci <= ii && ii < eci + 1

) {                                          ) {                                         

     224         renderSelectedHeaderCell.ca      229         renderSelectedHeaderCell.ca

ll(this, x, 0, colWidth, h);                 ll(this, x, 0, colWidth, h);                

     225       }                                  230       }                            

     226       draw.fillText(stringAt(ii), x      231       draw.fillText(stringAt(ii), x

 + (colWidth / 2), h / 2);                    + (colWidth / 2), h / 2);                  

                                                  232       if (i > 0 && data.cols.isHide

                                             (i - 1)) {                                  

                                                  233         draw.save();               

                                                  234         draw.attr({ strokeStyle: '#

                                             c6c6c6' });                                 

                                                  235         draw.line([x + 5, 5], [x + 

                                             5, h - 5]);                                 

                                                  236         draw.restore();            

                                                  237       }                            

     227     });                                  238     });                            

     228     draw.line([sumWidth + ntx, 0],       239     draw.line([sumWidth + ntx, 0], 

[sumWidth + ntx, h]);                        [sumWidth + ntx, h]);                       

     229     draw.line([0, h], [sumWidth + n      240     draw.line([0, h], [sumWidth + n

tx, h]);                                     tx, h]);                                    

     230   }                                      241   }                                

     231   draw.restore();                        242   draw.restore();                  

---                                          ---                                         

     286 class Table {                            297 class Table {                      

     287   constructor(el, data) {                298   constructor(el, data) {          

     288     this.el = el;                        299     this.el = el;                  

     289     this.draw = new Draw(el, data.v      300     this.draw = new Draw(el, data.v

iewWidth(), data.viewHeight());              iewWidth(), data.viewHeight());             

     290     this.data = data;                    301     this.data = data;              

                                                  302   }                                

                                                  303                                    

                                                  304   resetData(data) {                

                                                  305     this.data = data;              

                                                  306     this.render();                 

     291   }                                      307   }                                

     292                                          308                                    

     293   render() {                             309   render() {                       

     294     // resize canvas                     310     // resize canvas               

     295     const { data } = this;               311     const { data } = this;         

```

##  ../src/component/toolbar.js  ->  ../../x-spreadsheet/src/component/toolbar.js  
```
../src/component/toolbar.js                  ../../x-spreadsheet/src/component/toolbar.js

     156       this.textwrapEl = buildButton      156       this.textwrapEl = buildButton

WithIcon(`${t('toolbar.textwrap')}`          WithIcon(`${t('toolbar.textwrap')}`         

, 'textwrap', () => toggleChange.ca          , 'textwrap', () => toggleChange.ca         

ll(this, 'textwrap')),                       ll(this, 'textwrap')),                      

     157       buildDivider(),                    157       buildDivider(),              

     158       // this.linkEl = buildButtonW      158       // this.linkEl = buildButtonW

ithIcon('Insert link', 'link'),              ithIcon('Insert link', 'link'),             

     159       // this.chartEl = buildButton      159       // this.chartEl = buildButton

WithIcon('Insert chart', 'chart'),           WithIcon('Insert chart', 'chart'),          

     160       this.freezeEl = buildButtonWi      160       this.freezeEl = buildButtonWi

thIcon(`${t('toolbar.freeze')}`, 'f          thIcon(`${t('toolbar.freeze')}`, 'f         

reeze', () => toggleChange.call(thi          reeze', () => toggleChange.call(thi         

s, 'freeze')),                               s, 'freeze')),                              

     161                                                                                 

     162       //GUSA                                                                    

     163       this.overlayerEl = buildButto                                             

nWithIcon(`${t('toolbar.overlayer')                                                      

}`, 'overlayer', () => toggleChange                                                      

.call(this, 'overlayer')),                                                               

     164       this.autofilterEl = buildButt      161       this.autofilterEl = buildButt

onWithIcon(`${t('toolbar.autofilter          onWithIcon(`${t('toolbar.autofilter         

')}`, 'autofilter', () => toggleCha          ')}`, 'autofilter', () => toggleCha         

nge.call(this, 'autofilter')),               nge.call(this, 'autofilter')),              

     165       buildButton(`${t('toolbar.for      162       buildButton(`${t('toolbar.for

mula')}`).child(this.ddFormula.el),          mula')}`).child(this.ddFormula.el),         

     166       // buildDivider(),                 163       // buildDivider(),           

     167       this.moreEl = buildButton(`${      164       this.moreEl = buildButton(`${

t('toolbar.more')}`).child(this.ddM          t('toolbar.more')}`).child(this.ddM         

ore.el).hide(),                              ore.el).hide(),                             

     168     ];                                   165     ];                             

---                                          ---                                         

     222     if (cell) {                          219     if (cell) {                    

     223       if (cell.format) {                 220       if (cell.format) {           

     224         this.ddFormat.setTitle(cell      221         this.ddFormat.setTitle(cell

.format);                                    .format);                                   

     225       }                                  222       }                            

     226     }                                    223     }                              

     227     this.overlayerEl.active(true);                                              

     228   }                                      224   }                                

     229 }                                        225 }                                  

```

##  ../src/component/tooltip.js  ->  ../../x-spreadsheet/src/component/tooltip.js  
```
```

##  ../src/core/alphabet.js  ->  ../../x-spreadsheet/src/core/alphabet.js  
```
../src/core/alphabet.js                      ../../x-spreadsheet/src/core/alphabet.js    

                                                    1 import './_.prototypes';           

                                                    2                                    

       1 const alphabets = ['A', 'B', 'C', '        3 const alphabets = ['A', 'B', 'C', '

D', 'E', 'F', 'G', 'H', 'I', 'J', '          D', 'E', 'F', 'G', 'H', 'I', 'J', '         

K', 'L', 'M', 'N', 'O', 'P', 'Q', '          K', 'L', 'M', 'N', 'O', 'P', 'Q', '         

R', 'S', 'T', 'U', 'V', 'W', 'X', '          R', 'S', 'T', 'U', 'V', 'W', 'X', '         

Y', 'Z'];                                    Y', 'Z'];                                   

       2                                            4                                    

                                                    5 /** index number 2 letters         

                                                    6  * @example stringAt(26) ==> 'AA'  

                                                    7  * @date 2019-10-10                

                                                    8  * @export                         

                                                    9  * @param {number} index           

                                                   10  * @returns {string}               

                                                   11  */                                

       3 export function stringAt(index) {         12 export function stringAt(index) {  

       4   let str = '';                           13   let str = '';                    

       5   let cindex = index;                     14   let cindex = index;              

       6   while (cindex >= alphabets.length       15   while (cindex >= alphabets.length

) {                                          ) {                                         

       7     cindex /= alphabets.length;           16     cindex /= alphabets.length;    

---                                          ---                                         

      11   const last = index % alphabets.le       20   const last = index % alphabets.le

ngth;                                        ngth;                                       

      12   str += alphabets[last];                 21   str += alphabets[last];          

      13   return str;                             22   return str;                      

      14 }                                         23 }                                  

      15                                           24                                    

                                                   25 /** translate letter in A1-tag to n

                                             umber                                       

                                                   26  * @date 2019-10-10                

                                                   27  * @export                         

                                                   28  * @param {string} str "AA" in A1-t

                                             ag "AA1"                                    

                                                   29  * @returns {number}               

                                                   30  */                                

      16 export function indexAt(str) {            31 export function indexAt(str) {     

      17   let ret = 0;                            32   let ret = 0;                     

      18   for (let i = 0; i < str.length -        33   for (let i = 0; i < str.length - 

1; i += 1) {                                 1; i += 1) {                                

      19     const cindex = str.charCodeAt(i       34     const cindex = str.charCodeAt(i

) - 65;                                      ) - 65;                                     

      20     const exponet = str.length - 1        35     const exponet = str.length - 1 

- i;                                         - i;                                        

---                                          ---                                         

      23   ret += str.charCodeAt(str.length        38   ret += str.charCodeAt(str.length 

- 1) - 65;                                   - 1) - 65;                                  

      24   return ret;                             39   return ret;                      

      25 }                                         40 }                                  

      26                                           41                                    

      27 // B10 => x,y                             42 // B10 => x,y                      

                                                   43 /** translate A1-tag to XY-tag     

                                                   44  * @date 2019-10-10                

                                                   45  * @export                         

                                                   46  * @param {tagA1} src              

                                                   47  * @returns {tagXY}                

                                                   48  */                                

      28 export function expr2xy(src) {            49 export function expr2xy(src) {     

      29   let x = '';                             50   let x = '';                      

      30   let y = '';                             51   let y = '';                      

      31   for (let i = 0; i < src.length; i       52   for (let i = 0; i < src.length; i

 += 1) {                                      += 1) {                                    

      32     if (src.charAt(i) >= '0' && src       53     if (src.charAt(i) >= '0' && src

.charAt(i) <= '9') {                         .charAt(i) <= '9') {                        

---                                          ---                                         

      36     }                                     57     }                              

      37   }                                       58   }                                

      38   return [indexAt(x), parseInt(y, 1       59   return [indexAt(x), parseInt(y, 1

0) - 1];                                     0) - 1];                                    

      39 }                                         60 }                                  

      40                                           61                                    

                                                   62 /** translate XY-tag to A1-tag     

                                                   63  * @example x,y => B10             

                                                   64  * @date 2019-10-10                

                                                   65  * @export                         

                                                   66  * @param {number} x               

                                                   67  * @param {number} y               

                                                   68  * @returns {tagA1}                

                                                   69  */                                

                                                   70 export function xy2expr(x, y) {    

                                                   71   return `${stringAt(x)}${y + 1}`; 

                                                   72 }                                  

                                                   73                                    

                                                   74 /** translate A1-tag src by (xn, yn

                                             )                                           

                                                   75  * @date 2019-10-10                

                                                   76  * @export                         

                                                   77  * @param {tagA1} src              

                                                   78  * @param {number} xn              

                                                   79  * @param {number} yn              

                                                   80  * @returns {tagA1}                

                                                   81  */                                

      41 export function expr2expr(src, xn,        82 export function expr2expr(src, xn, 

yn) {                                        yn) {                                       

      42   const [x, y] = expr2xy(src);            83   const [x, y] = expr2xy(src);     

      43   return stringAt(x + xn) + (y + yn       84   return xy2expr(x + xn, y + yn);  

);                                                                                       

      44 }                                                                               

      45                                                                                 

      46 // x,y => B10                                                                   

      47 export function xy2expr(x, y) {                                                 

      48   return `${stringAt(x)}${y + 1}`;                                              

      49 }                                         85 }                                  

      50                                           86                                    

      51 export default {                          87 export default {                   

      52   stringAt,                               88   stringAt,                        

      53   indexAt,                                89   indexAt,                         

```

##  ../src/core/auto_filter.js  ->  ../../x-spreadsheet/src/core/auto_filter.js  
```
```

##  ../src/core/cell.js  ->  ../../x-spreadsheet/src/core/cell.js  
```
../src/core/cell.js                          ../../x-spreadsheet/src/core/cell.js        

       6 const infixExprToSuffixExpr = (src)        6 const infixExprToSuffixExpr = (src)

 => {                                         => {                                       

       7   const operatorStack = [];                7   const operatorStack = [];        

       8   const stack = [];                        8   const stack = [];                

       9   let subStrs = []; // SUM, A1, B2,        9   let subStrs = []; // SUM, A1, B2,

 50 ...                                       50 ...                                     

      10   let fnArgType = 0; // 1 => , 2 =>       10   let fnArgType = 0; // 1 => , 2 =>

 :                                            :                                          

                                                   11   let fnArgOperator = '';          

      11   let fnArgsLen = 1; // A1,A2,A3...       12   let fnArgsLen = 1; // A1,A2,A3...

      12   for (let i = 0; i < src.length; i       13   for (let i = 0; i < src.length; i

 += 1) {                                      += 1) {                                    

      13     const c = src.charAt(i);              14     const c = src.charAt(i);       

      14     // console.log('c:', c);              15     // console.log('c:', c);       

      15     if (c !== ' ') {                      16     if (c !== ' ') {               

---                                          ---                                         

      47               }                           48               }                    

      48               stack.push([c1, range       49               stack.push([c1, range

len]);                                       len]);                                      

      49             } catch (e) {                 50             } catch (e) {          

      50               // console.log(e);          51               // console.log(e);   

      51             }                             52             }                      

      52           } else if (fnArgType ===        53           } else if (fnArgType === 

1) {                                         1 || fnArgType === 3) {                     

                                                   54             if (fnArgType === 3) st

                                             ack.push(fnArgOperator);                    

      53             // fn argument => A1,A2       55             // fn argument => A1,A2

,B5                                          ,B5                                         

      54             stack.push([c1, fnArgsL       56             stack.push([c1, fnArgsL

en]);                                        en]);                                       

      55             fnArgsLen = 1;                57             fnArgsLen = 1;         

      56           } else {                        58           } else {                 

      57             // console.log('c1:', c       59             // console.log('c1:', c

1, fnArgType, stack, operatorStack)          1, fnArgType, stack, operatorStack)         

;                                            ;                                           

---                                          ---                                         

      60               if (operatorStack.len       62               if (operatorStack.len

gth <= 0) break;                             gth <= 0) break;                            

      61               c1 = operatorStack.po       63               c1 = operatorStack.po

p();                                         p();                                        

      62             }                             64             }                      

      63           }                               65           }                        

      64           fnArgType = 0;                  66           fnArgType = 0;           

                                                   67         } else if (c === '=' || c =

                                             == '>' || c === '<') {                      

                                                   68           const nc = src.charAt(i +

                                              1);                                        

                                                   69           fnArgOperator = c;       

                                                   70           if (nc === '=' || nc === 

                                             '-') {                                      

                                                   71             fnArgOperator += nc;   

                                                   72             i += 1;                

                                                   73           }                        

                                                   74           fnArgType = 3;           

      65         } else if (c === ':') {           75         } else if (c === ':') {    

      66           fnArgType = 2;                  76           fnArgType = 2;           

      67         } else if (c === ',') {           77         } else if (c === ',') {    

                                                   78           if (fnArgType === 3) {   

                                                   79             stack.push(fnArgOperato

                                             r);                                         

                                                   80           }                        

      68           fnArgType = 1;                  81           fnArgType = 1;           

      69           fnArgsLen += 1;                 82           fnArgsLen += 1;          

      70         } else if (c === '(' && sub       83         } else if (c === '(' && sub

Strs.length > 0) {                           Strs.length > 0) {                          

      71           // function                     84           // function              

      72           operatorStack.push(subStr       85           operatorStack.push(subStr

s.join(''));                                 s.join(''));                                

---                                          ---                                         

     117 const evalSuffixExpr = (srcStack, f      130 const evalSuffixExpr = (srcStack, f

ormulaMap, cellRender, cellList) =>          ormulaMap, cellRender, cellList) =>         

 {                                            {                                          

     118   const stack = [];                      131   const stack = [];                

     119   // console.log(':::::formulaMap:'      132   // console.log(':::::formulaMap:'

, formulaMap);                               , formulaMap);                              

     120   for (let i = 0; i < srcStack.leng      133   for (let i = 0; i < srcStack.leng

th; i += 1) {                                th; i += 1) {                               

     121     // console.log(':::>>>', srcSta      134     // console.log(':::>>>', srcSta

ck[i]);                                      ck[i]);                                     

                                                  135     const expr = srcStack[i];      

                                                  136     const fc = expr[0];            

     122     if (srcStack[i] === '+') {           137     if (expr === '+') {            

     123       const top = stack.pop();           138       const top = stack.pop();     

     124       stack.push(Number(stack.pop()      139       stack.push(Number(stack.pop()

) + Number(top));                            ) + Number(top));                           

     125     } else if (srcStack[i] === '-')      140     } else if (expr === '-') {     

 {                                                                                       

                                                  141       if (stack.length === 1) {    

     126       const top = stack.pop();           142         const top = stack.pop();   

                                                  143         stack.push(Number(top) * -1

                                             );                                          

                                                  144       } else {                     

                                                  145         const top = stack.pop();   

     127       stack.push(Number(stack.pop()      146         stack.push(Number(stack.pop

) - Number(top));                            ()) - Number(top));                         

                                                  147       }                            

     128     } else if (srcStack[i] === '*')      148     } else if (expr === '*') {     

 {                                                                                       

     129       stack.push(Number(stack.pop()      149       stack.push(Number(stack.pop()

) * Number(stack.pop()));                    ) * Number(stack.pop()));                   

     130     } else if (srcStack[i] === '/')      150     } else if (expr === '/') {     

 {                                                                                       

     131       const top = stack.pop();           151       const top = stack.pop();     

     132       stack.push(Number(stack.pop()      152       stack.push(Number(stack.pop()

) / Number(top));                            ) / Number(top));                           

                                                  153     } else if (fc === '=' || fc ===

                                              '>' || fc === '<') {                       

                                                  154       const top = stack.pop();     

                                                  155       const Fn = Function;         

                                                  156       stack.push(new Fn(`return ${s

                                             tack.pop()} ${expr === '=' ? '==' :         

                                              expr} ${top}`)());                         

     133     } else if (Array.isArray(srcSta      157     } else if (Array.isArray(expr))

ck[i])) {                                     {                                          

     134       const [formula, len] = srcSta      158       const [formula, len] = expr; 

ck[i];                                                                                   

     135       const params = [];                 159       const params = [];           

     136       for (let j = 0; j < len; j +=      160       for (let j = 0; j < len; j +=

 1) {                                         1) {                                       

     137         params.push(stack.pop());        161         params.push(stack.pop());  

     138       }                                  162       }                            

                                                  163       // console.log('::::params:',

                                              formulaMap, expr,  formula, params         

                                             );                                          

     139       stack.push(formulaMap[formula      164       stack.push(formulaMap[formula

].render(params.reverse()));                 ].render(params.reverse()));                

     140     } else {                             165     } else {                       

                                                  166       // console.log('cellList:', c

                                             ellList, expr);                             

     141       if (cellList.includes(srcStac      167       if (cellList.includes(expr)) 

k[i])) {                                     {                                           

     142         return 0;                        168         return 0;                  

     143       }                                  169       }                            

                                                  170       if ((fc >= 'a' && fc <= 'z') 

                                             || (fc >= 'A' && fc <= 'Z')) {              

     144       cellList.push(srcStack[i]);        171         cellList.push(expr);       

                                                  172       }                            

     145       stack.push(evalSubExpr(srcSta      173       stack.push(evalSubExpr(expr, 

ck[i], cellRender));                         cellRender));                               

     146     }                                    174     }                              

     147     // console.log('stack:', stack)      175     // console.log('stack:', stack)

;                                            ;                                           

     148   }                                      176   }                                

     149   return stack[0];                       177   return stack[0];                 

     150 };                                       178 };                                 

```

##  ../src/core/cell_range.js  ->  ../../x-spreadsheet/src/core/cell_range.js  
```
```

##  ../src/core/clipboard.js  ->  ../../x-spreadsheet/src/core/clipboard.js  
```
```

##  ../src/core/col.js  ->  ../../x-spreadsheet/src/core/col.js  
```
../src/core/col.js                           ../../x-spreadsheet/src/core/col.js         

      10     this.indexWidth = indexWidth;         10     this.indexWidth = indexWidth;  

      11     this.minWidth = minWidth;             11     this.minWidth = minWidth;      

      12   }                                       12   }                                

      13                                           13                                    

      14   setData(d) {                            14   setData(d) {                     

      15     console.log("col setData:", d);                                             

      16     if (d.len) {                          15     if (d.len) {                   

      17       this.len = d.len;                   16       this.len = d.len;            

      18       delete d.len;                       17       delete d.len;                

      19     }                                     18     }                              

      20     this._ = d;                           19     this._ = d;                    

---                                          ---                                         

      24     const { len } = this;                 23     const { len } = this;          

      25     return Object.assign({ len }, t       24     return Object.assign({ len }, t

his._);                                      his._);                                     

      26   }                                       25   }                                

      27                                           26                                    

      28   getWidth(i) {                           27   getWidth(i) {                    

                                                   28     if (this.isHide(i)) return 0;  

      29     const col = this._[i];                29     const col = this._[i];         

      30     if (col && col.width) {               30     if (col && col.width) {        

      31       return col.width;                   31       return col.width;            

      32     }                                     32     }                              

      33     //console.log("col gwtWidth: ",                                             

 this.width);                                                                            

      34     return this.width;                    33     return this.width;             

      35   }                                       34   }                                

      36                                           35                                    

      37   getOrNew(ci) {                          36   getOrNew(ci) {                   

      38     this._[ci] = this._[ci] || {};        37     this._[ci] = this._[ci] || {}; 

      39     return this._[ci];                    38     return this._[ci];             

      40   }                                       39   }                                

      41                                           40                                    

      42   setWidth(ci, width) {                   41   setWidth(ci, width) {            

      43     console.log("col setWidth: ", c                                             

i, width);                                                                               

      44     const col = this.getOrNew(ci);        42     const col = this.getOrNew(ci); 

      45     col.width = width;                    43     col.width = width;             

                                                   44   }                                

                                                   45                                    

                                                   46   unhide(idx) {                    

                                                   47     let index = idx;               

                                                   48     while (index > 0) {            

                                                   49       index -= 1;                  

                                                   50       if (this.isHide(index)) {    

                                                   51         this.setHide(index, false);

                                                   52       } else break;                

                                                   53     }                              

                                                   54   }                                

                                                   55                                    

                                                   56   isHide(ci) {                     

                                                   57     const col = this._[ci];        

                                                   58     return col && col.hide;        

                                                   59   }                                

                                                   60                                    

                                                   61   setHide(ci, v) {                 

                                                   62     const col = this.getOrNew(ci); 

                                                   63     if (v === true) col.hide = true

                                             ;                                           

                                                   64     else delete col.hide;          

      46   }                                       65   }                                

      47                                           66                                    

      48   setStyle(ci, style) {                   67   setStyle(ci, style) {            

      49     const col = this.getOrNew(ci);        68     const col = this.getOrNew(ci); 

      50     col.style = style;                    69     col.style = style;             

```

##  ../src/core/data_proxy.js  ->  ../../x-spreadsheet/src/core/data_proxy.js  
```
../src/core/data_proxy.js                    ../../x-spreadsheet/src/core/data_proxy.js  

      11 import { Cols } from './col';             11 import { Cols } from './col';      

      12 import { Validations } from './vali       12 import { Validations } from './vali

dation';                                     dation';                                    

      13 import { CellRange } from './cell_r       13 import { CellRange } from './cell_r

ange';                                       ange';                                      

      14 import { expr2xy, xy2expr } from '.       14 import { expr2xy, xy2expr } from '.

/alphabet';                                  /alphabet';                                 

      15 import { t } from '../locale/locale       15 import { t } from '../locale/locale

';                                           ';                                          

      16                                                                                 

      17 import { Shapes } from './shape';                                               

//GUSA                                                                                   

      18                                           16                                    

      19 // private methods                        17 // private methods                 

      20 /*                                        18 /*                                 

      21  * {                                      19  * {                               

      22  *  name: ''                              20  *  name: ''                       

---                                          ---                                         

      37  *        right: [style, color],          35  *        right: [style, color],   

      38  *        top: [style, color],            36  *        top: [style, color],     

      39  *        bottom: [style, color],         37  *        bottom: [style, color],  

      40  *      },                                38  *      },                         

      41  *      font: {                           39  *      font: {                    

      42  *        family: 'Helvetica',            40  *        name: 'Helvetica',       

      43  *        size: 10,                       41  *        size: 10,                

      44  *        bold: false,                    42  *        bold: false,             

      45  *        italic: false,                  43  *        italic: false,           

      46  *      }                                 44  *      }                          

      47  *    }                                   45  *    }                            

---                                          ---                                         

      77   },                                      75   },                               

      78   showGrid: true,                         76   showGrid: true,                  

      79   showToolbar: true,                      77   showToolbar: true,               

      80   showContextmenu: true,                  78   showContextmenu: true,           

      81   row: {                                  79   row: {                           

      82 //    len: 100,                                                                 

      83     len: 1000,                            80     len: 100,                      

      84     height: 20,                           81     height: 25,                    

      85   },                                      82   },                               

      86   col: {                                  83   col: {                           

      87 //    len: 26,                            84     len: 26,                       

      88     len: 1000,                                                                  

      89     width: 100,                           85     width: 100,                    

      90     indexWidth: 60,                       86     indexWidth: 60,                

      91     minWidth: 60,                         87     minWidth: 60,                  

      92   },                                                                            

      93   shape: {                                                                      

      94     draggable: true,                                                            

      95   },                                      88   },                               

      96   style: {                                89   style: {                         

      97     bgcolor: '#ffffff',                   90     bgcolor: '#ffffff',            

      98     align: 'left',                        91     align: 'left',                 

      99     valign: 'middle',                     92     valign: 'middle',              

---                                          ---                                         

     109     },                                   102     },                             

     110   },                                     103   },                               

     111 };                                       104 };                                 

     112                                          105                                    

     113 const toolbarHeight = 41;                106 const toolbarHeight = 41;          

                                                  107 const bottombarHeight = 41;        

     114                                          108                                    

     115                                          109                                    

     116 // src: cellRange                        110 // src: cellRange                  

     117 // dst: cellRange                        111 // dst: cellRange                  

     118 function canPaste(src, dst, error =      112 function canPaste(src, dst, error =

 () => {}) {                                  () => {}) {                                

---                                          ---                                         

     334     this.freeze = [0, 0];                328     this.freeze = [0, 0];          

     335     this.styles = []; // Array<Styl      329     this.styles = []; // Array<Styl

e>                                           e>                                          

     336     this.merges = new Merges(); //       330     this.merges = new Merges(); // 

[CellRange, ...]                             [CellRange, ...]                            

     337     this.rows = new Rows(this.setti      331     this.rows = new Rows(this.setti

ngs.row);                                    ngs.row);                                   

     338     this.cols = new Cols(this.setti      332     this.cols = new Cols(this.setti

ngs.col);                                    ngs.col);                                   

     339 //    console.log("rows: ",this.row                                             

s);                                                                                      

     340 //    console.log("cols: ",this.col                                             

s);                                                                                      

     341     this.shapes = new Shapes(this.s                                             

ettings.shape);//GUSA                                                                    

     342                                                                                 

     343     console.log(this.rows);                                                     

     344     console.log(this.cols);                                                     

     345     console.log(this.shapes);                                                   

     346                                                                                 

     347     this.validations = new Validati      333     this.validations = new Validati

ons();                                       ons();                                      

     348     this.hyperlinks = {};                334     this.hyperlinks = {};          

     349     this.comments = {};                  335     this.comments = {};            

     350     // save data end                     336     // save data end               

     351                                          337                                    

---                                          ---                                         

     357     this.autoFilter = new AutoFilte      343     this.autoFilter = new AutoFilte

r();                                         r();                                        

     358     this.change = () => {};              344     this.change = () => {};        

     359     this.exceptRowSet = new Set();       345     this.exceptRowSet = new Set(); 

     360     this.sortedRowMap = new Map();       346     this.sortedRowMap = new Map(); 

     361     this.unsortedRowMap = new Map()      347     this.unsortedRowMap = new Map()

;                                            ;                                           

     362     this.h_splitSheets = new Array(                                             

);                                                                                       

     363     this.v_splitSheets = new Array(                                             

);                                                                                       

     364   }                                      348   }                                

     365                                          349                                    

     366   addValidation(mode, ref, validato      350   addValidation(mode, ref, validato

r) {                                         r) {                                        

     367     // console.log('mode:', mode, '      351     // console.log('mode:', mode, '

, ref:', ref, ', validator:', valid          , ref:', ref, ', validator:', valid         

ator);                                       ator);                                      

     368     this.changeData(() => {              352     this.changeData(() => {        

---                                          ---                                         

     435       } else if (clipboard.isCut())      419       } else if (clipboard.isCut())

 {                                            {                                          

     436         cutPaste.call(this, clipboa      420         cutPaste.call(this, clipboa

rd.range, selector.range);                   rd.range, selector.range);                  

     437       }                                  421       }                            

     438     });                                  422     });                            

     439     return true;                         423     return true;                   

                                                  424   }                                

                                                  425                                    

                                                  426   pasteFromText(txt) {             

                                                  427     const lines = txt.split('\r\n')

                                             .map(it => it.replace(/"/g, '').spl         

                                             it('\t'));                                  

                                                  428     if (lines.length > 0) lines.len

                                             gth -= 1;                                   

                                                  429     const { rows, selector } = this

                                             ;                                           

                                                  430     this.changeData(() => {        

                                                  431       rows.paste(lines, selector.ra

                                             nge);                                       

                                                  432     });                            

     440   }                                      433   }                                

     441                                          434                                    

     442   autofill(cellRange, what, error =      435   autofill(cellRange, what, error =

 () => {}) {                                  () => {}) {                                

     443     const srcRange = this.selector.      436     const srcRange = this.selector.

range;                                       range;                                      

     444     if (!canPaste.call(this, srcRan      437     if (!canPaste.call(this, srcRan

ge, cellRange, error)) return false          ge, cellRange, error)) return false         

;                                            ;                                           

---                                          ---                                         

     504         if (value) this.merge();         497         if (value) this.merge();   

     505         else this.unmerge();             498         else this.unmerge();       

     506       } else if (property === 'bord      499       } else if (property === 'bord

er') {                                       er') {                                      

     507         setStyleBorders.call(this,       500         setStyleBorders.call(this, 

value);                                      value);                                     

     508       } else if (property === 'form      501       } else if (property === 'form

ula') {                                      ula') {                                     

                                                  502         // console.log('>>>', selec

                                             tor.multiple());                            

                                                  503         const { ri, ci, range } = s

                                             elector;                                    

                                                  504         if (selector.multiple()) { 

                                                  505           const [rn, cn] = selector

                                             .size();                                    

                                                  506           const {                  

                                                  507             sri, sci, eri, eci,    

                                                  508           } = range;               

                                                  509           if (rn > 1) {            

                                                  510             for (let i = sci; i <= 

                                             eci; i += 1) {                              

                                                  511               const cell = rows.get

                                             CellOrNew(eri + 1, i);                      

                                                  512               cell.text = `=${value

                                             }(${xy2expr(i, sri)}:${xy2expr(i, e         

                                             ri)})`;                                     

                                                  513             }                      

                                                  514           } else if (cn > 1) {     

                                                  515             const cell = rows.getCe

                                             llOrNew(ri, eci + 1);                       

                                                  516             cell.text = `=${value}(

                                             ${xy2expr(sci, ri)}:${xy2expr(eci,          

                                             ri)})`;                                     

                                                  517           }                        

                                                  518         } else {                   

     509         const cell = rows.getCellOr      519           const cell = rows.getCell

New(selector.ri, selector.ci);               OrNew(ri, ci);                              

     510         cell.text = `=${value}()`;       520           cell.text = `=${value}()`

                                             ;                                           

                                                  521         }                          

     511       } else {                           522       } else {                     

     512         selector.range.each((ri, ci      523         selector.range.each((ri, ci

) => {                                       ) => {                                      

     513           const cell = rows.getCell      524           const cell = rows.getCell

OrNew(ri, ci);                               OrNew(ri, ci);                              

     514           let cstyle = {};               525           let cstyle = {};         

     515           if (cell.style !== undefi      526           if (cell.style !== undefi

ned) {                                       ned) {                                      

---                                          ---                                         

     528             || property === 'underl      539             || property === 'underl

ine'                                         ine'                                        

     529             || property === 'align'      540             || property === 'align'

 || property === 'valign'                     || property === 'valign'                   

     530             || property === 'color'      541             || property === 'color'

 || property === 'bgcolor') {                 || property === 'bgcolor') {               

     531             cstyle[property] = valu      542             cstyle[property] = valu

e;                                           e;                                          

     532             cell.style = this.addSt      543             cell.style = this.addSt

yle(cstyle);                                 yle(cstyle);                                

                                                  544           } else {                 

                                                  545             cell[property] = value;

     533           }                              546           }                        

     534         });                              547         });                        

     535       }                                  548       }                            

     536     });                                  549     });                            

     537   }                                      550   }                                

     538                                          551                                    

     539   // state: input | finished             552   // state: input | finished       

     540   setSelectedCellText(text, state =      553   setSelectedCellText(text, state =

 'input') {                                   'input') {                                 

                                                  554     const { autoFilter, selector, r

                                             ows } = this;                               

     541     const { ri, ci } = this.selecto      555     const { ri, ci } = selector;   

r;                                                                                       

     542     let nri = ri;                        556     let nri = ri;                  

     543     if (this.unsortedRowMap.has(ri)      557     if (this.unsortedRowMap.has(ri)

) {                                          ) {                                         

     544       nri = this.unsortedRowMap.get      558       nri = this.unsortedRowMap.get

(ri);                                        (ri);                                       

     545     }                                    559     }                              

                                                  560     const oldCell = rows.getCell(nr

                                             i, ci);                                     

                                                  561     const oldText = oldCell ? oldCe

                                             ll.text : '';                               

     546     this.setCellText(nri, ci, text,      562     this.setCellText(nri, ci, text,

 state);                                      state);                                    

                                                  563     // replace filter.value        

                                                  564     if (autoFilter.active()) {     

                                                  565       const filter = autoFilter.get

                                             Filter(ci);                                 

                                                  566       if (filter) {                

                                                  567         const vIndex = filter.value

                                             .findIndex(v => v === oldText);             

                                                  568         if (vIndex >= 0) {         

                                                  569           filter.value.splice(vInde

                                             x, 1, text);                                

                                                  570         }                          

                                                  571         // console.log('filter:', f

                                             ilter, oldCell);                            

                                                  572       }                            

                                                  573     }                              

     547     this.resetAutoFilter();              574     // this.resetAutoFilter();     

     548   }                                      575   }                                

     549                                          576                                    

     550   getSelectedCell() {                    577   getSelectedCell() {              

     551     const { ri, ci } = this.selecto      578     const { ri, ci } = this.selecto

r;                                           r;                                          

     552     let nri = ri;                        579     let nri = ri;                  

---                                          ---                                         

     811       });                                838       });                          

     812     });                                  839     });                            

     813   }                                      840   }                                

     814                                          841                                    

     815   scrollx(x, cb) {                       842   scrollx(x, cb) {                 

     816     console.log("scrollx: ");                                                   

     817     const { scroll, freeze, cols }       843     const { scroll, freeze, cols } 

= this;                                      = this;                                     

     818     const [, fci] = freeze;              844     const [, fci] = freeze;        

     819     const [                              845     const [                        

     820       ci, left, width,                   846       ci, left, width,             

     821     ] = helper.rangeReduceIf(fci, c      847     ] = helper.rangeReduceIf(fci, c

ols.len, 0, 0, x, i => cols.getWidt          ols.len, 0, 0, x, i => cols.getWidt         

h(i));                                       h(i));                                      

---                                          ---                                         

     825     if (scroll.x !== x1) {               851     if (scroll.x !== x1) {         

     826       scroll.ci = x > 0 ? ci : 0;        852       scroll.ci = x > 0 ? ci : 0;  

     827       scroll.x = x1;                     853       scroll.x = x1;               

     828       cb();                              854       cb();                        

     829     }                                    855     }                              

     830                                                                                 

     831     this.v_splitSheets.forEach(func                                             

tion(sheet) {                                                                            

     832         console.log("movex: ", x);                                              

     833        sheet.sync_movex(x);                                                     

     834      });                                                                        

     835   }                                                                             

     836                                                                                 

     837   sync_scrollx(x, cb) {                                                         

     838     const { scroll, freeze, cols }                                              

= this;                                                                                  

     839     const [, fci] = freeze;                                                     

     840     const [                                                                     

     841       ci, left, width,                                                          

     842     ] = helper.rangeReduceIf(fci, c                                             

ols.len, 0, 0, x, i => cols.getWidt                                                      

h(i));                                                                                   

     843     // console.log('fci:', fci, ',                                              

ci:', ci);                                                                               

     844     let x1 = left;                                                              

     845     if (x > 0) x1 += width;                                                     

     846     if (scroll.x !== x1) {                                                      

     847       scroll.ci = x > 0 ? ci : 0;                                               

     848       scroll.x = x1;                                                            

     849       cb();                                                                     

     850     }                                                                           

     851   }                                      856   }                                

     852                                          857                                    

     853   scrolly(y, cb) {                       858   scrolly(y, cb) {                 

     854     console.log("scrolly: ");                                                   

     855     const { scroll, freeze, rows }       859     const { scroll, freeze, rows } 

= this;                                      = this;                                     

     856     const [fri] = freeze;                860     const [fri] = freeze;          

     857     const [                              861     const [                        

     858       ri, top, height,                   862       ri, top, height,             

     859     ] = helper.rangeReduceIf(fri, r      863     ] = helper.rangeReduceIf(fri, r

ows.len, 0, 0, y, i => rows.getHeig          ows.len, 0, 0, y, i => rows.getHeig         

ht(i));                                      ht(i));                                     

---                                          ---                                         

     863     if (scroll.y !== y1) {               867     if (scroll.y !== y1) {         

     864       scroll.ri = y > 0 ? ri : 0;        868       scroll.ri = y > 0 ? ri : 0;  

     865       scroll.y = y1;                     869       scroll.y = y1;               

     866       cb();                              870       cb();                        

     867     }                                    871     }                              

     868                                                                                 

     869    this.h_splitSheets.forEach(funct                                             

ion(sheet) {                                                                             

     870       console.log("movey: ", y);                                                

     871      sheet.sync_movey(y);                                                       

     872     });                                                                         

     873   }                                                                             

     874                                                                                 

     875   sync_scrolly(y, cb) {                                                         

     876     const { scroll, freeze, rows }                                              

= this;                                                                                  

     877     const [fri] = freeze;                                                       

     878     const [                                                                     

     879       ri, top, height,                                                          

     880     ] = helper.rangeReduceIf(fri, r                                             

ows.len, 0, 0, y, i => rows.getHeig                                                      

ht(i));                                                                                  

     881     let y1 = top;                                                               

     882     if (y > 0) y1 += height;                                                    

     883     // console.log('ri:', ri, ' ,y:                                             

', y1);                                                                                  

     884     if (scroll.y !== y1) {                                                      

     885       scroll.ri = y > 0 ? ri : 0;                                               

     886       scroll.y = y1;                                                            

     887       cb();                                                                     

     888     }                                    872   }                                

     889   }                                      873                                    

     890   cellRect(ri, ci) {                     874   cellRect(ri, ci) {               

     891     const { rows, cols } = this;         875     const { rows, cols } = this;   

     892     const left = cols.sumWidth(0, c      876     const left = cols.sumWidth(0, c

i);                                          i);                                         

     893     const top = rows.sumHeight(0, r      877     const top = rows.sumHeight(0, r

i);                                          i);                                         

     894     const cell = rows.getCell(ri, c      878     const cell = rows.getCell(ri, c

i);                                          i);                                         

---                                          ---                                         

     949   setCellText(ri, ci, text, state)       933   setCellText(ri, ci, text, state) 

{                                            {                                           

     950     const { rows, history, validati      934     const { rows, history, validati

ons } = this;                                ons } = this;                               

     951     if (state === 'finished') {          935     if (state === 'finished') {    

     952       rows.setCellText(ri, ci, '');      936       rows.setCellText(ri, ci, '');

     953       history.add(this.getData());       937       history.add(this.getData()); 

     954       //rows.setCellText(ri, ci, te      938       rows.setCellText(ri, ci, text

xt);                                         );                                          

     955       //console.log("*** setCellTex                                             

t: ", text);                                                                             

     956                                                                                 

     957       this.changeData(() => {                                                   

     958          this.rows.setCellText(ri,                                              

ci, text);                                                                               

     959       });                                                                       

     960                                                                                 

     961     } else {                             939     } else {                       

     962       rows.setCellText(ri, ci, text      940       rows.setCellText(ri, ci, text

);                                           );                                          

     963       this.change(this.getData());       941       this.change(this.getData()); 

     964     }                                    942     }                              

     965     // validator                         943     // validator                   

---                                          ---                                         

     984   freezeTotalHeight() {                  962   freezeTotalHeight() {            

     985     return this.rows.sumHeight(0, t      963     return this.rows.sumHeight(0, t

his.freeze[0]);                              his.freeze[0]);                             

     986   }                                      964   }                                

     987                                          965                                    

     988   setRowHeight(ri, height) {             966   setRowHeight(ri, height) {       

     989 //    console.log("setRowHeight");                                              

     990     this.changeData(() => {              967     this.changeData(() => {        

     991       this.rows.setHeight(ri, heigh      968       this.rows.setHeight(ri, heigh

t);                                          t);                                         

     992     });                                  969     });                            

     993   }                                      970   }                                

     994                                          971                                    

     995   setColWidth(ci, width) {               972   setColWidth(ci, width) {         

     996 //    console.log("setColWidth");                                               

     997     this.changeData(() => {              973     this.changeData(() => {        

     998       this.cols.setWidth(ci, width)      974       this.cols.setWidth(ci, width)

;                                            ;                                           

     999     });                                  975     });                            

    1000   }                                      976   }                                

    1001                                          977                                    

    1002   viewHeight() {                         978   viewHeight() {                   

    1003     const { view, showToolbar } = t      979     const { view, showToolbar } = t

his.settings;                                his.settings;                               

    1004     let h = view.height();               980     let h = view.height();         

                                                  981     h -= bottombarHeight;          

    1005     if (showToolbar) {                   982     if (showToolbar) {             

    1006       h -= toolbarHeight;                983       h -= toolbarHeight;          

    1007     }                                    984     }                              

    1008     return h;                            985     return h;                      

    1009   }                                      986   }                                

---                                          ---                                         

    1015   freezeViewRange() {                    992   freezeViewRange() {              

    1016     const [ri, ci] = this.freeze;        993     const [ri, ci] = this.freeze;  

    1017     return new CellRange(0, 0, ri -      994     return new CellRange(0, 0, ri -

 1, ci - 1, this.freezeTotalWidth()           1, ci - 1, this.freezeTotalWidth()         

, this.freezeTotalHeight());                 , this.freezeTotalHeight());                

    1018   }                                      995   }                                

    1019                                          996                                    

                                                  997   contentRange() {                 

                                                  998     const { rows, cols } = this;   

                                                  999     const [ri, ci] = rows.maxCell()

                                             ;                                           

                                                 1000     const h = rows.sumHeight(0, ri 

                                             + 1);                                       

                                                 1001     const w = cols.sumWidth(0, ci +

                                              1);                                        

                                                 1002     return new CellRange(0, 0, ri, 

                                             ci, w, h);                                  

                                                 1003   }                                

                                                 1004                                    

                                                 1005   exceptRowTotalHeight(sri, eri) { 

                                                 1006     const { exceptRowSet, rows } = 

                                             this;                                       

                                                 1007     const exceptRows = Array.from(e

                                             xceptRowSet);                               

                                                 1008     let exceptRowTH = 0;           

                                                 1009     exceptRows.forEach((ri) => {   

                                                 1010       if (ri < sri || ri > eri) {  

                                                 1011         const height = rows.getHeig

                                             ht(ri);                                     

                                                 1012         exceptRowTH += height;     

                                                 1013       }                            

                                                 1014     });                            

                                                 1015     return exceptRowTH;            

                                                 1016   }                                

                                                 1017                                    

    1020   viewRange() {                         1018   viewRange() {                    

    1021     const {                             1019     const {                        

    1022       scroll, rows, cols, freeze,       1020       scroll, rows, cols, freeze, e

                                             xceptRowSet,                                

    1023     } = this;                           1021     } = this;                      

    1024     let { ri, ci } = scroll;            1022     let { ri, ci } = scroll;       

    1025     if (ri <= 0) [ri] = freeze;         1023     if (ri <= 0) [ri] = freeze;    

    1026     if (ci <= 0) [, ci] = freeze;       1024     if (ci <= 0) [, ci] = freeze;  

    1027                                         1025                                    

    1028     let [x, y] = [0, 0];                1026     let [x, y] = [0, 0];           

    1029     let [eri, eci] = [rows.len, col     1027     let [eri, eci] = [rows.len, col

s.len];                                      s.len];                                     

    1030     for (let i = ri; i < rows.len;      1028     for (let i = ri; i < rows.len; 

i += 1) {                                    i += 1) {                                   

                                                 1029       if (!exceptRowSet.has(i)) {  

    1031       y += rows.getHeight(i);           1030         y += rows.getHeight(i);    

    1032       eri = i;                          1031         eri = i;                   

                                                 1032       }                            

    1033       if (y > this.viewHeight()) br     1033       if (y > this.viewHeight()) br

eak;                                         eak;                                        

    1034     }                                   1034     }                              

    1035     for (let j = ci; j < cols.len;      1035     for (let j = ci; j < cols.len; 

j += 1) {                                    j += 1) {                                   

    1036       x += cols.getWidth(j);            1036       x += cols.getWidth(j);       

    1037       eci = j;                          1037       eci = j;                     

---                                          ---                                         

    1042   }                                     1042   }                                

    1043                                         1043                                    

    1044   eachMergesInView(viewRange, cb) {     1044   eachMergesInView(viewRange, cb) {

    1045     this.merges.filterIntersects(vi     1045     this.merges.filterIntersects(vi

ewRange)                                     ewRange)                                    

    1046       .forEach(it => cb(it));           1046       .forEach(it => cb(it));      

                                                 1047   }                                

                                                 1048                                    

                                                 1049   hideRowsOrCols() {               

                                                 1050     const { rows, cols, selector } 

                                             = this;                                     

                                                 1051     const [rlen, clen] = selector.s

                                             ize();                                      

                                                 1052     const {                        

                                                 1053       sri, sci, eri, eci,          

                                                 1054     } = selector.range;            

                                                 1055     if (rlen === rows.len) {       

                                                 1056       for (let ci = sci; ci <= eci;

                                              ci += 1) {                                 

                                                 1057         cols.setHide(ci, true);    

                                                 1058       }                            

                                                 1059     } else if (clen === cols.len) {

                                                 1060       for (let ri = sri; ri <= eri;

                                              ri += 1) {                                 

                                                 1061         rows.setHide(ri, true);    

                                                 1062       }                            

                                                 1063     }                              

                                                 1064   }                                

                                                 1065                                    

                                                 1066   // type: row | col               

                                                 1067   // index row-index | col-index   

                                                 1068   unhideRowsOrCols(type, index) {  

                                                 1069     this[`${type}s`].unhide(index);

    1047   }                                     1070   }                                

    1048                                         1071                                    

    1049   rowEach(min, max, cb) {               1072   rowEach(min, max, cb) {          

    1050     let y = 0;                          1073     let y = 0;                     

    1051     const { rows } = this;              1074     const { rows } = this;         

    1052     const frset = this.exceptRowSet     1075     const frset = this.exceptRowSet

;                                            ;                                           

    1053     const frary = [...frset];           1076     const frary = [...frset];      

    1054     let offset = 0;                     1077     let offset = 0;                

    1055     for (let i = 0; i < frary.lengt     1078     for (let i = 0; i < frary.lengt

h; i += 1) {                                 h; i += 1) {                                

    1056       if (frary[i] < min) offset +=     1079       if (frary[i] < min) {        

 1;                                                                                      

                                                 1080         offset += 1;               

                                                 1081       }                            

    1057     }                                   1082     }                              

    1058     // console.log('min:', min, ',      1083     // console.log('min:', min, ', 

max:', max, ', scroll:', scroll);            max:', max, ', scroll:', scroll);           

    1059     for (let i = min + offset; i <=     1084     for (let i = min + offset; i <=

 max + offset; i += 1) {                      max + offset; i += 1) {                    

    1060       if (frset.has(i)) {               1085       if (frset.has(i)) {          

    1061         offset += 1;                    1086         offset += 1;               

    1062       } else {                          1087       } else {                     

    1063         const rowHeight = rows.getH     1088         const rowHeight = rows.getH

eight(i);                                    eight(i);                                   

                                                 1089         if (rowHeight > 0) {       

    1064         cb(i, y, rowHeight);            1090           cb(i, y, rowHeight);     

    1065         y += rowHeight;                 1091           y += rowHeight;          

    1066         if (y > this.viewHeight())      1092           if (y > this.viewHeight()

break;                                       ) break;                                    

                                                 1093         }                          

    1067       }                                 1094       }                            

    1068     }                                   1095     }                              

    1069   }                                     1096   }                                

    1070                                         1097                                    

    1071   colEach(min, max, cb) {               1098   colEach(min, max, cb) {          

    1072     let x = 0;                          1099     let x = 0;                     

    1073     const { cols } = this;              1100     const { cols } = this;         

    1074     for (let i = min; i <= max; i +     1101     for (let i = min; i <= max; i +

= 1) {                                       = 1) {                                      

    1075       const colWidth = cols.getWidt     1102       const colWidth = cols.getWidt

h(i);                                        h(i);                                       

                                                 1103       if (colWidth > 0) {          

    1076       cb(i, x, colWidth);               1104         cb(i, x, colWidth);        

    1077       x += colWidth;                    1105         x += colWidth;             

    1078       if (x > this.viewWidth()) bre     1106         if (x > this.viewWidth()) b

ak;                                          reak;                                       

                                                 1107       }                            

    1079     }                                   1108     }                              

    1080   }                                     1109   }                                

    1081                                         1110                                    

    1082   defaultStyle() {                      1111   defaultStyle() {                 

    1083     return this.settings.style;         1112     return this.settings.style;    

---                                          ---                                         

    1093     styles.push(nstyle);                1122     styles.push(nstyle);           

    1094     return styles.length - 1;           1123     return styles.length - 1;      

    1095   }                                     1124   }                                

    1096                                         1125                                    

    1097   changeData(cb) {                      1126   changeData(cb) {                 

    1098 //    console.log("***changeData");                                             

    1099     this.history.add(this.getData()     1127     this.history.add(this.getData()

);                                           );                                          

    1100     cb();                               1128     cb();                          

    1101     this.change(this.getData());        1129     this.change(this.getData());   

    1102                                                                                 

    1103                                                                                 

    1104     //splitSheets.length                                                        

    1105     this.v_splitSheets.forEach(func                                             

tion(sheet) {                                                                            

    1106       sheet.sync();                                                             

    1107     });                                                                         

    1108     this.h_splitSheets.forEach(func                                             

tion(sheet) {                                                                            

    1109       sheet.sync();                                                             

    1110     });                                                                         

    1111                                                                                 

    1112   }                                     1130   }                                

    1113                                         1131                                    

    1114   setData(d) {                          1132   setData(d) {                     

    1115 //    console.log("***setData");                                                

    1116     Object.keys(d).forEach((propert     1133     Object.keys(d).forEach((propert

y) => {                                      y) => {                                     

    1117       if (property === 'merges' ||      1134       if (property === 'merges' || 

property === 'rows'                          property === 'rows'                         

    1118         || property === 'cols' || p     1135         || property === 'cols' || p

roperty === 'validations'                    roperty === 'validations') {                

    1119          || property === 'shapes'                                               

    1120       ) {                                                                       

    1121         this[property].setData(d[pr     1136         this[property].setData(d[pr

operty]);                                    operty]);                                   

    1122       } else if (property === 'free     1137       } else if (property === 'free

ze') {                                       ze') {                                      

    1123         const [x, y] = expr2xy(d[pr     1138         const [x, y] = expr2xy(d[pr

operty]);                                    operty]);                                   

    1124         this.freeze = [y, x];           1139         this.freeze = [y, x];      

    1125       } else if (d[property] !== un     1140       } else if (d[property] !== un

defined) {                                   defined) {                                  

    1126         this[property] = d[property     1141         this[property] = d[property

];                                           ];                                          

    1127       }                                 1142       }                            

    1128     });                                 1143     });                            

    1129                                                                                 

    1130 //   console.log(this['cols'].getDa                                             

ta()) ;                                                                                  

    1131 //   let c = this['cols'].getData()                                             

;                                                                                        

    1132 /*                                                                              

    1133    if  (!(c.[])) {                                                              

    1134         console.log("col setdata ok                                             

");                                                                                      

    1135   //      const d = this['cols'].ge                                             

tData();                                                                                 

    1136   //       Object.assign([{width: 1                                             

00}], d);                                                                                

    1137   //      this['cols'].setData(d);                                              

    1138    }  else {                                                                    

    1139         console.log("col setdata ng                                             

");                                                                                      

    1140                                                                                 

    1141    }                                                                            

    1142   */                                                                            

    1143     return this;                        1144     return this;                   

    1144   }                                     1145   }                                

    1145                                         1146                                    

    1146   getData() {                           1147   getData() {                      

    1147     const {                             1148     const {                        

---                                          ---                                         

    1156       cols: cols.getData(),             1157       cols: cols.getData(),        

    1157       validations: validations.getD     1158       validations: validations.getD

ata(),                                       ata(),                                      

    1158       autofilter: autoFilter.getDat     1159       autofilter: autoFilter.getDat

a(),                                         a(),                                        

    1159     };                                  1160     };                             

    1160   }                                     1161   }                                

    1161                                                                                 

    1162   horizontalAddSplitSheet(seet){ //                                             

GUSA                                                                                     

    1163      const {                                                                    

    1164        h_splitSheets,                                                           

    1165      } = this;                                                                  

    1166      h_splitSheets.push(seet);                                                  

    1167   }                                                                             

    1168                                                                                 

    1169   verticalAddSplitSheet(seet){ //GU                                             

SA                                                                                       

    1170      const {                                                                    

    1171        v_splitSheets,                                                           

    1172      } = this;                                                                  

    1173      v_splitSheets.push(seet);                                                  

    1174 //     console.log("addSplitSheet:                                              

", splitSheets.length);                                                                  

    1175   };                                                                            

    1176 }                                       1162 }                                  

```

##  ../src/core/font.js  ->  ../../x-spreadsheet/src/core/font.js  
```
../src/core/font.js                          ../../x-spreadsheet/src/core/font.js        

                                                    1 // docs                            

                                                    2 import './_.prototypes';           

                                                    3                                    

                                                    4 /** default font list              

                                                    5  * @type {BaseFont[]}              

                                                    6  */                                

       1 const baseFonts = [                        7 const baseFonts = [                

       2   { key: 'Arial', title: 'Arial' },        8   { key: 'Arial', title: 'Arial' },

       3   { key: 'Helvetica', title: 'Helve        9   { key: 'Helvetica', title: 'Helve

tica' },                                     tica' },                                    

       4   { key: 'Source Sans Pro', title:        10   { key: 'Source Sans Pro', title: 

'Source Sans Pro' },                         'Source Sans Pro' },                        

       5   { key: 'Comic Sans MS', title: 'C       11   { key: 'Comic Sans MS', title: 'C

omic Sans MS' },                             omic Sans MS' },                            

       6   { key: 'Courier New', title: 'Cou       12   { key: 'Courier New', title: 'Cou

rier New' },                                 rier New' },                                

       7   { key: 'Verdana', title: 'Verdana       13   { key: 'Verdana', title: 'Verdana

' },                                         ' },                                        

       8   { key: 'Lato', title: 'Lato' },         14   { key: 'Lato', title: 'Lato' },  

       9 ];                                        15 ];                                 

      10                                           16                                    

                                                   17 /** default fontSize list          

                                                   18  * @type {FontSize[]}              

                                                   19  */                                

      11 const fontSizes = [                       20 const fontSizes = [                

      12   { pt: 7.5, px: 10 },                    21   { pt: 7.5, px: 10 },             

      13   { pt: 8, px: 11 },                      22   { pt: 8, px: 11 },               

      14   { pt: 9, px: 12 },                      23   { pt: 9, px: 12 },               

      15   { pt: 10, px: 13 },                     24   { pt: 10, px: 13 },              

---                                          ---                                         

      28   // { pt: 54, px: 71.7 },                37   // { pt: 54, px: 71.7 },         

      29   // { pt: 63, px: 83.7 },                38   // { pt: 63, px: 83.7 },         

      30   // { pt: 72, px: 95.6 },                39   // { pt: 72, px: 95.6 },         

      31 ];                                        40 ];                                 

      32                                           41                                    

                                                   42 /** map pt to px                   

                                                   43  * @date 2019-10-10                

                                                   44  * @param {fontsizePT} pt          

                                                   45  * @returns {fontsizePX}           

                                                   46  */                                

      33 function getFontSizePxByPt(pt) {          47 function getFontSizePxByPt(pt) {   

      34   for (let i = 0; i < fontSizes.len       48   for (let i = 0; i < fontSizes.len

gth; i += 1) {                               gth; i += 1) {                              

      35     const fontSize = fontSizes[i];        49     const fontSize = fontSizes[i]; 

      36     if (fontSize.pt === pt) {             50     if (fontSize.pt === pt) {      

      37       return fontSize.px;                 51       return fontSize.px;          

      38     }                                     52     }                              

      39   }                                       53   }                                

      40   return pt;                              54   return pt;                       

      41 }                                         55 }                                  

      42                                           56                                    

                                                   57 /** transform baseFonts to map     

                                                   58  * @date 2019-10-10                

                                                   59  * @param {BaseFont[]} [ary=[]]    

                                                   60  * @returns {object}               

                                                   61  */                                

      43 const fonts = (ary = []) => {             62 function fonts(ary = []) {         

      44   const map = {};                         63   const map = {};                  

      45   baseFonts.concat(ary).forEach((f)       64   baseFonts.concat(ary).forEach((f)

 => {                                         => {                                       

      46     map[f.key] = f;                       65     map[f.key] = f;                

      47   });                                     66   });                              

      48   return map;                             67   return map;                      

      49 };                                        68 }                                  

      50                                           69                                    

      51 export default {};                        70 export default {};                 

      52 export {                                  71 export {                           

      53   fontSizes,                              72   fontSizes,                       

      54   fonts,                                  73   fonts,                           

```

##  ../src/core/format.js  ->  ../../x-spreadsheet/src/core/format.js  
```
../src/core/format.js                        ../../x-spreadsheet/src/core/format.js      

       1 import { tf } from '../locale/local        1 import { tf } from '../locale/local

e';                                          e';                                         

       2                                            2                                    

       3 const formatStringRender = v => v;         3 const formatStringRender = v => v; 

       4                                            4                                    

       5 const formatNumberRender = (v) => {        5 const formatNumberRender = (v) => {

                                                    6   // match "-12.1" or "12" or "12.1

                                             "                                           

       6   if (/^(-?\d*.?\d*)$/.test(v)) {          7   if (/^(-?\d*.?\d*)$/.test(v)) {  

       7     const v1 = Number(v).toFixed(2)        8     const v1 = Number(v).toFixed(2)

.toString();                                 .toString();                                

       8     const [first, ...parts] = v1.sp        9     const [first, ...parts] = v1.sp

lit('\\.');                                  lit('\\.');                                 

       9     return [first.replace(/(\d)(?=(       10     return [first.replace(/(\d)(?=(

\d{3})+(?!\d))/g, '$1,'), ...parts]          \d{3})+(?!\d))/g, '$1,'), ...parts]         

;                                            ;                                           

      10   }                                       11   }                                

---                                          ---                                         

      51     type: 'number',                       52     type: 'number',                

      52     label: '$10.00',                      53     label: '$10.00',               

      53     render: v => `$${formatNumberRe       54     render: v => `$${formatNumberRe

nder(v)}`,                                   nder(v)}`,                                  

      54   },                                      55   },                               

      55   {                                       56   {                                

                                                   57     key: 'eur',                    

                                                   58     title: tf('format.eur'),       

                                                   59     type: 'number',                

                                                   60     label: '€10.00',               

                                                   61     render: v => `€${formatNumberRe

                                             nder(v)}`,                                  

                                                   62   },                               

                                                   63   {                                

      56     key: 'date',                          64     key: 'date',                   

      57     title: tf('format.date'),             65     title: tf('format.date'),      

      58     type: 'date',                         66     type: 'date',                  

      59     label: '26/09/2008',                  67     label: '26/09/2008',           

      60     render: formatStringRender,           68     render: formatStringRender,    

```

##  ../src/core/formula.js  ->  ../../x-spreadsheet/src/core/formula.js  
```
../src/core/formula.js                       ../../x-spreadsheet/src/core/formula.js     

       2   formula:                                 2   formula:                         

       3     key                                    3     key                            

       4     title                                  4     title                          

       5     render                                 5     render                         

       6 */                                         6 */                                 

                                                    7 /**                                

                                                    8  * @typedef {object} Formula       

                                                    9  * @property {string} key          

                                                   10  * @property {function} title      

                                                   11  * @property {function} render     

                                                   12  */                                

       7 import { tf } from '../locale/local       13 import { tf } from '../locale/local

e';                                          e';                                         

       8                                           14                                    

                                                   15 /** @type {Formula[]} */           

       9 const baseFormulas = [                    16 const baseFormulas = [             

      10   {                                       17   {                                

      11     key: 'SUM',                           18     key: 'SUM',                    

      12     title: tf('formula.sum'),             19     title: tf('formula.sum'),      

      13     render: ary => ary.reduce((a, b       20     render: ary => ary.reduce((a, b

) => Number(a) + Number(b), 0),              ) => Number(a) + Number(b), 0),             

---                                          ---                                         

      26     key: 'MIN',                           33     key: 'MIN',                    

      27     title: tf('formula.min'),             34     title: tf('formula.min'),      

      28     render: ary => Math.min(...ary.       35     render: ary => Math.min(...ary.

map(v => Number(v))),                        map(v => Number(v))),                       

      29   },                                      36   },                               

      30   {                                       37   {                                

                                                   38     key: 'IF',                     

                                                   39     title: tf('formula._if'),      

                                                   40     render: ([b, t, f]) => (b ? t :

                                              f),                                        

                                                   41   },                               

                                                   42   {                                

                                                   43     key: 'AND',                    

                                                   44     title: tf('formula.and'),      

                                                   45     render: ary => ary.every(it => 

                                             it),                                        

                                                   46   },                               

                                                   47   {                                

                                                   48     key: 'OR',                     

                                                   49     title: tf('formula.or'),       

                                                   50     render: ary => ary.some(it => i

                                             t),                                         

                                                   51   },                               

                                                   52   {                                

      31     key: 'CONCAT',                        53     key: 'CONCAT',                 

      32     title: tf('formula.concat'),          54     title: tf('formula.concat'),   

      33     render: ary => ary.join(''),          55     render: ary => ary.join(''),   

      34   },                                      56   },                               

                                                   57   /* support:  1 + A1 + B2 * 3     

                                                   58   {                                

                                                   59     key: 'DIVIDE',                 

                                                   60     title: tf('formula.divide'),   

                                                   61     render: ary => ary.reduce((a, b

                                             ) => Number(a) / Number(b)),                

                                                   62   },                               

                                                   63   {                                

                                                   64     key: 'PRODUCT',                

                                                   65     title: tf('formula.product'),  

                                                   66     render: ary => ary.reduce((a, b

                                             ) => Number(a) * Number(b),1),              

                                                   67   },                               

                                                   68   {                                

                                                   69     key: 'SUBTRACT',               

                                                   70     title: tf('formula.subtract'), 

                                                   71     render: ary => ary.reduce((a, b

                                             ) => Number(a) - Number(b)),                

                                                   72   },                               

                                                   73   */                               

      35 ];                                        74 ];                                 

      36                                           75                                    

      37 const formulas = baseFormulas;            76 const formulas = baseFormulas;     

      38                                           77                                    

      39 // const formulas = (formulaAry = [       78 // const formulas = (formulaAry = [

]) => {                                      ]) => {                                     

```

##  ../src/core/helper.js  ->  ../../x-spreadsheet/src/core/helper.js  
```
```

##  ../src/core/history.js  ->  ../../x-spreadsheet/src/core/history.js  
```
../src/core/history.js                       ../../x-spreadsheet/src/core/history.js     

       7   }                                        7   }                                

       8                                            8                                    

       9   add(data) {                              9   add(data) {                      

      10     this.undoItems.push(JSON.string       10     this.undoItems.push(JSON.string

ify(data));                                  ify(data));                                 

      11     this.redoItems = [];                  11     this.redoItems = [];           

      12     //console.log("histry add");                                                

      13   }                                       12   }                                

      14                                           13                                    

      15   canUndo() {                             14   canUndo() {                      

      16     return this.undoItems.length >        15     return this.undoItems.length > 

0;                                           0;                                          

      17   }                                       16   }                                

```

##  ../src/core/merge.js  ->  ../../x-spreadsheet/src/core/merge.js  
```
```

##  ../src/core/row.js  ->  ../../x-spreadsheet/src/core/row.js  
```
../src/core/row.js                           ../../x-spreadsheet/src/core/row.js         

       8     // default row height                  8     // default row height          

       9     this.height = height;                  9     this.height = height;          

      10   }                                       10   }                                

      11                                           11                                    

      12   getHeight(ri) {                         12   getHeight(ri) {                  

                                                   13     if (this.isHide(ri)) return 0; 

      13     const row = this.get(ri);             14     const row = this.get(ri);      

      14     if (row && row.height) {              15     if (row && row.height) {       

      15       return row.height;                  16       return row.height;           

      16     }                                     17     }                              

      17     return this.height;                   18     return this.height;            

      18   }                                       19   }                                

      19                                           20                                    

      20   setHeight(ri, v) {                      21   setHeight(ri, v) {               

      21 //    console.log("row setHeight");                                             

      22     const row = this.getOrNew(ri);        22     const row = this.getOrNew(ri); 

      23     row.height = v;                       23     row.height = v;                

                                                   24   }                                

                                                   25                                    

                                                   26   unhide(idx) {                    

                                                   27     let index = idx;               

                                                   28     while (index > 0) {            

                                                   29       index -= 1;                  

                                                   30       if (this.isHide(index)) {    

                                                   31         this.setHide(index, false);

                                                   32       } else break;                

                                                   33     }                              

                                                   34   }                                

                                                   35                                    

                                                   36   isHide(ri) {                     

                                                   37     const row = this.get(ri);      

                                                   38     return row && row.hide;        

                                                   39   }                                

                                                   40                                    

                                                   41   setHide(ri, v) {                 

                                                   42     const row = this.getOrNew(ri); 

                                                   43     if (v === true) row.hide = true

                                             ;                                           

                                                   44     else delete row.hide;          

      24   }                                       45   }                                

      25                                           46                                    

      26   setStyle(ri, style) {                   47   setStyle(ri, style) {            

      27     const row = this.getOrNew(ri);        48     const row = this.getOrNew(ri); 

      28     row.style = style;                    49     row.style = style;             

---                                          ---                                         

     105     if (deri < sri || deci < sci) {      126     if (deri < sri || deci < sci) {

     106       isAdd = false;                     127       isAdd = false;               

     107       if (deri < sri) dn = drn;          128       if (deri < sri) dn = drn;    

     108       else dn = dcn;                     129       else dn = dcn;               

     109     }                                    130     }                              

     110     // console.log('drn:', drn, ',       131     // console.log('drn:', drn, ', 

dcn:', dcn);                                 dcn:', dcn, dn, isAdd);                     

     111     for (let i = sri; i <= eri; i +      132     for (let i = sri; i <= eri; i +

= 1) {                                       = 1) {                                      

     112       if (this._[i]) {                   133       if (this._[i]) {             

     113         for (let j = sci; j <= eci;      134         for (let j = sci; j <= eci;

 j += 1) {                                    j += 1) {                                  

     114           if (this._[i].cells && th      135           if (this._[i].cells && th

is._[i].cells[j]) {                          is._[i].cells[j]) {                         

     115             for (let ii = dsri; ii       136             for (let ii = dsri; ii 

<= deri; ii += rn) {                         <= deri; ii += rn) {                        

---                                          ---                                         

     118                 const nci = jj + (j      139                 const nci = jj + (j

 - sci);                                      - sci);                                    

     119                 const ncell = helpe      140                 const ncell = helpe

r.cloneDeep(this._[i].cells[j]);             r.cloneDeep(this._[i].cells[j]);            

     120                 // ncell.text            141                 // ncell.text      

     121                 if (autofill && nce      142                 if (autofill && nce

ll && ncell.text && ncell.text.leng          ll && ncell.text && ncell.text.leng         

th > 0) {                                    th > 0) {                                   

     122                   const { text } =       143                   const { text } = 

ncell;                                       ncell;                                      

     123                   let n = (jj - dsc      144                   let n = (jj - dsc

i) + (ii - dsri) + 1;                        i) + (ii - dsri) + 2;                       

     124                   // console.log('n                                             

:', n);                                                                                  

     125                   if (!isAdd) {          145                   if (!isAdd) {    

     126                     n -= dn + 1;         146                     n -= dn + 1;   

     127                   }                      147                   }                

     128                   if (text[0] === '      148                   if (text[0] === '

=') {                                        =') {                                       

     129                     ncell.text = te      149                     ncell.text = te

xt.replace(/\w{1,3}\d/g, (word) =>           xt.replace(/\w{1,3}\d/g, (word) =>          

{                                            {                                           

     130                       let [xn, yn]       150                       let [xn, yn] 

= [0, 0];                                    = [0, 0];                                   

     131                       if (sri === d      151                       if (sri === d

sri) {                                       sri) {                                      

     132                         xn = n;          152                         xn = n - 1;

                                                  153                         // if (isAd

                                             d) xn -= 1;                                 

     133                       } else {           154                       } else {     

     134                         yn = n;          155                         yn = n - 1;

     135                       }                  156                       }            

     136                       // console.lo      157                       // console.lo

g('xn:', xn, ', yn:', yn, expr2expr          g('xn:', xn, ', yn:', yn, word, exp         

(word, xn, yn));                             r2expr(word, xn, yn));                      

     137                       return expr2e      158                       return expr2e

xpr(word, xn, yn);                           xpr(word, xn, yn);                          

     138                     });                  159                     });            

     139                   } else {               160                   } else {         

     140                     const result =       161                     const result = 

/[\\.\d]+$/.exec(text);                      /[\\.\d]+$/.exec(text);                     

     141                     // console.log(      162                     // console.log(

'result:', result);                          'result:', result);                         

     142                     if (result !==       163                     if (result !== 

null) {                                      null) {                                     

     143                       const index =      164                       const index =

 Number(result[0]) + n;                       Number(result[0]) + n - 1;                 

     144                       ncell.text =       165                       ncell.text = 

text.substring(0, result.index) + i          text.substring(0, result.index) + i         

ndex;                                        ndex;                                       

     145                     }                    166                     }              

     146                   }                      167                   }                

     147                 }                        168                 }                  

     148                 // console.log('nce                                             

ll:', nri, nci, ncell);                                                                  

     149                 this.setCell(nri, n      169                 this.setCell(nri, n

ci, ncell, what);                            ci, ncell, what);                           

     150                 cb(nri, nci, ncell)      170                 cb(nri, nci, ncell)

;                                            ;                                           

     151               }                          171               }                    

     152             }                            172             }                      

     153           }                              173           }                        

---                                          ---                                         

     169         ncellmm[nri] = ncellmm[nri]      189         ncellmm[nri] = ncellmm[nri]

 || { cells: {} };                            || { cells: {} };                          

     170         ncellmm[nri].cells[nci] = t      190         ncellmm[nri].cells[nci] = t

his._[ri].cells[ci];                         his._[ri].cells[ci];                        

     171       });                                191       });                          

     172     });                                  192     });                            

     173     this._ = ncellmm;                    193     this._ = ncellmm;              

                                                  194   }                                

                                                  195                                    

                                                  196   // src: Array<Array<String>>     

                                                  197   paste(src, dstCellRange) {       

                                                  198     if (src.length <= 0) return;   

                                                  199     const { sri, sci } = dstCellRan

                                             ge;                                         

                                                  200     src.forEach((row, i) => {      

                                                  201       const ri = sri + i;          

                                                  202       row.forEach((cell, j) => {   

                                                  203         const ci = sci + j;        

                                                  204         this.setCellText(ri, ci, ce

                                             ll);                                        

                                                  205       });                          

                                                  206     });                            

     174   }                                      207   }                                

     175                                          208                                    

     176   insert(sri, n = 1) {                   209   insert(sri, n = 1) {             

     177     const ndata = {};                    210     const ndata = {};              

     178     this.each((ri, row) => {             211     this.each((ri, row) => {       

---                                          ---                                         

     257         }                                290         }                          

     258       }                                  291       }                            

     259     }                                    292     }                              

     260   }                                      293   }                                

     261                                          294                                    

                                                  295   maxCell() {                      

                                                  296     const keys = Object.keys(this._

                                             );                                          

                                                  297     const ri = keys[keys.length - 1

                                             ];                                          

                                                  298     const col = this._[ri];        

                                                  299     if (col) {                     

                                                  300       const { cells } = col;       

                                                  301       const ks = Object.keys(cells)

                                             ;                                           

                                                  302       const ci = ks[ks.length - 1];

                                                  303       return [parseInt(ri, 10), par

                                             seInt(ci, 10)];                             

                                                  304     }                              

                                                  305     return [0, 0];                 

                                                  306   }                                

                                                  307                                    

     262   each(cb) {                             308   each(cb) {                       

     263     Object.entries(this._).forEach(      309     Object.entries(this._).forEach(

([ri, row]) => {                             ([ri, row]) => {                            

     264       cb(ri, row);                       310       cb(ri, row);                 

     265     });                                  311     });                            

     266   }                                      312   }                                

---                                          ---                                         

     272       });                                318       });                          

     273     }                                    319     }                              

     274   }                                      320   }                                

     275                                          321                                    

     276   setData(d) {                           322   setData(d) {                     

     277 //    console.log("row setData: ",d                                             

);                                                                                       

     278     if (d.len) {                         323     if (d.len) {                   

     279       this.len = d.len;                  324       this.len = d.len;            

     280       delete d.len;                      325       delete d.len;                

     281     }                                    326     }                              

     282     this._ = d;                          327     this._ = d;                    

```

##  ../src/core/scroll.js  ->  ../../x-spreadsheet/src/core/scroll.js  
```
```

##  ../src/core/selector.js  ->  ../../x-spreadsheet/src/core/selector.js  
```
```

##  ../src/core/validation.js  ->  ../../x-spreadsheet/src/core/validation.js  
```
```

##  ../src/core/validator.js  ->  ../../x-spreadsheet/src/core/validator.js  
```
```

##  ../src/locale/de.js  ->  ../../x-spreadsheet/src/locale/de.js  
```
```

##  ../src/locale/en.js  ->  ../../x-spreadsheet/src/locale/en.js  
```
../src/locale/en.js                          ../../x-spreadsheet/src/locale/en.js        

       1 export default {                           1 export default {                   

       2   toolbar: {                               2   toolbar: {                       

       3     undo: 'Undo',                          3     undo: 'Undo',                  

       4     redo: 'Redo',                          4     redo: 'Redo',                  

                                                    5     print: 'Print',                

       5     paintformat: 'Paint format',           6     paintformat: 'Paint format',   

       6     clearformat: 'Clear format',           7     clearformat: 'Clear format',   

       7     format: 'Format',                      8     format: 'Format',              

       8     font: 'Font',                          9     fontName: 'Font',              

       9     fontSize: 'Font size',                10     fontSize: 'Font size',         

      10     fontBold: 'Font bold',                11     fontBold: 'Font bold',         

      11     fontItalic: 'Font italic',            12     fontItalic: 'Font italic',     

      12     underline: 'Underline',               13     underline: 'Underline',        

      13     strike: 'Strike',                     14     strike: 'Strike',              

      14     textColor: 'Text color',              15     color: 'Text color',           

      15     fillColor: 'Fill color',              16     bgcolor: 'Fill color',         

      16     border: 'Borders',                    17     border: 'Borders',             

      17     merge: 'Merge cells',                 18     merge: 'Merge cells',          

      18     align: 'Horizontal align',            19     align: 'Horizontal align',     

      19     valign: 'Vertical align',             20     valign: 'Vertical align',      

      20     textwrap: 'Text wrapping',            21     textwrap: 'Text wrapping',     

      21     freeze: 'Freeze cell',                22     freeze: 'Freeze cell',         

      22     overlayer: 'OverLayer enable',                                              

      23     autofilter: 'Filter',                 23     autofilter: 'Filter',          

      24     formula: 'Functions',                 24     formula: 'Functions',          

      25     more: 'More',                         25     more: 'More',                  

      26   },                                      26   },                               

      27   contextmenu: {                          27   contextmenu: {                   

      28     copy: 'Copy',                         28     copy: 'Copy',                  

      29     cut: 'Cut',                           29     cut: 'Cut',                    

      30     paste: 'Paste',                       30     paste: 'Paste',                

      31     pasteValue: 'Paste values only'       31     pasteValue: 'Paste values only'

,                                            ,                                           

      32     pasteFormat: 'Paste format only       32     pasteFormat: 'Paste format only

',                                           ',                                          

                                                   33     hide: 'Hide',                  

      33     insertRow: 'Insert row',              34     insertRow: 'Insert row',       

      34     insertColumn: 'Insert column',        35     insertColumn: 'Insert column', 

                                                   36     deleteSheet: 'Delete',         

      35     deleteRow: 'Delete row',              37     deleteRow: 'Delete row',       

      36     deleteColumn: 'Delete column',        38     deleteColumn: 'Delete column', 

      37     deleteCell: 'Delete cell',            39     deleteCell: 'Delete cell',     

      38     deleteCellText: 'Delete cell te       40     deleteCellText: 'Delete cell te

xt',                                         xt',                                        

      39     validation: 'Data validations',       41     validation: 'Data validations',

                                                   42     cellprintable: 'Enable export',

                                                   43     cellnonprintable: 'Disable expo

                                             rt',                                        

                                                   44     celleditable: 'Enable editing',

                                                   45     cellnoneditable: 'Disable editi

                                             ng',                                        

      40   },                                      46   },                               

      41   format: {                               47   format: {                        

      42     normal: 'Normal',                     48     normal: 'Normal',              

      43     text: 'Plain Text',                   49     text: 'Plain Text',            

      44     number: 'Number',                     50     number: 'Number',              

      45     percent: 'Percent',                   51     percent: 'Percent',            

      46     rmb: 'RMB',                           52     rmb: 'RMB',                    

      47     usd: 'USD',                           53     usd: 'USD',                    

                                                   54     eur: 'EUR',                    

      48     date: 'Date',                         55     date: 'Date',                  

      49     time: 'Time',                         56     time: 'Time',                  

      50     datetime: 'Date time',                57     datetime: 'Date time',         

      51     duration: 'Duration',                 58     duration: 'Duration',          

      52   },                                      59   },                               

      53   formula: {                              60   formula: {                       

      54     sum: 'Sum',                           61     sum: 'Sum',                    

      55     average: 'Average',                   62     average: 'Average',            

      56     max: 'Max',                           63     max: 'Max',                    

      57     min: 'Min',                           64     min: 'Min',                    

                                                   65     _if: 'IF',                     

                                                   66     and: 'AND',                    

                                                   67     or: 'OR',                      

      58     concat: 'Concat',                     68     concat: 'Concat',              

      59   },                                      69   },                               

      60   validation: {                           70   validation: {                    

      61     required: 'it must be required'       71     required: 'it must be required'

,                                            ,                                           

      62     notMatch: 'it not match its val       72     notMatch: 'it not match its val

idation rule',                               idation rule',                              

---                                          ---                                         

      76   calendar: {                             86   calendar: {                      

      77     weeks: ['Sun', 'Mon', 'Tue', 'W       87     weeks: ['Sun', 'Mon', 'Tue', 'W

ed', 'Thu', 'Fri', 'Sat'],                   ed', 'Thu', 'Fri', 'Sat'],                  

      78     months: ['January', 'February',       88     months: ['January', 'February',

 'March', 'April', 'May', 'June', '           'March', 'April', 'May', 'June', '         

July', 'August', 'September', 'Octo          July', 'August', 'September', 'Octo         

ber', 'November', 'December'],               ber', 'November', 'December'],              

      79   },                                      89   },                               

      80   button: {                               90   button: {                        

                                                   91     next: 'Next',                  

      81     cancel: 'Cancel',                     92     cancel: 'Cancel',              

      82     remove: 'Remove',                     93     remove: 'Remove',              

      83     save: 'Save',                         94     save: 'Save',                  

      84     ok: 'OK',                             95     ok: 'OK',                      

      85   },                                      96   },                               

```

##  ../src/locale/locale.js  ->  ../../x-spreadsheet/src/locale/locale.js  
```
```

##  ../src/locale/nl.js  ->  ../../x-spreadsheet/src/locale/nl.js  
```
```

##  ../src/locale/zh-cn.js  ->  ../../x-spreadsheet/src/locale/zh-cn.js  
```
../src/locale/zh-cn.js                       ../../x-spreadsheet/src/locale/zh-cn.js     

       1 export default {                           1 export default {                   

       2   toolbar: {                               2   toolbar: {                       

       3     undo: '撤销',                          3     undo: '撤销',                  

       4     redo: '恢复',                          4     redo: '恢复',                  

                                                    5     print: '打印',                 

       5     paintformat: '格式刷',                 6     paintformat: '格式刷',         

       6     clearformat: '清除格式',               7     clearformat: '清除格式',       

       7     format: '数据格式',                    8     format: '数据格式',            

       8     font: '字体',                          9     fontName: '字体',              

       9     fontSize: '字号',                     10     fontSize: '字号',              

      10     fontBold: '加粗',                     11     fontBold: '加粗',              

      11     fontItalic: '倾斜',                   12     fontItalic: '倾斜',            

      12     underline: '下划线',                  13     underline: '下划线',           

      13     strike: '删除线',                     14     strike: '删除线',              

      14     textColor: '字体颜色',                15     color: '字体颜色',             

      15     fillColor: '填充颜色',                16     bgcolor: '填充颜色',           

      16     border: '边框',                       17     border: '边框',                

      17     merge: '合并单元格',                  18     merge: '合并单元格',           

      18     align: '水平对齐',                    19     align: '水平对齐',             

      19     valign: '垂直对齐',                   20     valign: '垂直对齐',            

      20     textwrap: '自动换行',                 21     textwrap: '自动换行',          

---                                          ---                                         

      27     copy: '复制',                         28     copy: '复制',                  

      28     cut: '剪切',                          29     cut: '剪切',                   

      29     paste: '粘贴',                        30     paste: '粘贴',                 

      30     pasteValue: '粘贴数据',               31     pasteValue: '粘贴数据',        

      31     pasteFormat: '粘贴格式',              32     pasteFormat: '粘贴格式',       

                                                   33     hide: '隐藏',                  

      32     insertRow: '插入行',                  34     insertRow: '插入行',           

      33     insertColumn: '插入列',               35     insertColumn: '插入列',        

                                                   36     deleteSheet: '删除',           

      34     deleteRow: '删除行',                  37     deleteRow: '删除行',           

      35     deleteColumn: '删除列',               38     deleteColumn: '删除列',        

      36     deleteCell: '删除',                   39     deleteCell: '删除',            

      37     deleteCellText: '删除数据',           40     deleteCellText: '删除数据',    

      38     validation: '数据验证',               41     validation: '数据验证',        

                                                   42     cellprintable: '可打印',       

                                                   43     cellnonprintable: '不可打印',  

                                                   44     celleditable: '可编辑',        

                                                   45     cellnoneditable: '不可编辑',   

      39   },                                      46   },                               

      40   format: {                               47   format: {                        

      41     normal: '正常',                       48     normal: '正常',                

      42     text: '文本',                         49     text: '文本',                  

      43     number: '数值',                       50     number: '数值',                

      44     percent: '百分比',                    51     percent: '百分比',             

      45     rmb: '人民币',                        52     rmb: '人民币',                 

      46     usd: '美元',                          53     usd: '美元',                   

                                                   54     eur: '欧元',                   

      47     date: '短日期',                       55     date: '短日期',                

      48     time: '时间',                         56     time: '时间',                  

      49     datetime: '长日期',                   57     datetime: '长日期',            

      50     duration: '持续时间',                 58     duration: '持续时间',          

      51   },                                      59   },                               

---                                          ---                                         

      53     sum: '求和',                          61     sum: '求和',                   

      54     average: '求平均值',                  62     average: '求平均值',           

      55     max: '求最大值',                      63     max: '求最大值',               

      56     min: '求最小值',                      64     min: '求最小值',               

      57     concat: '字符拼接',                   65     concat: '字符拼接',            

                                                   66     _if: '条件判断',               

                                                   67     and: '和',                     

                                                   68     or: '或',                      

      58   },                                      69   },                               

      59   validation: {                           70   validation: {                    

      60     required: '此值必填',                 71     required: '此值必填',          

      61     notMatch: '此值不匹配验证规则',       72     notMatch: '此值不匹配验证规则',

      62     between: '此值应在 {} 和 {} 之间       73     between: '此值应在 {} 和 {} 之间

',                                           ',                                          

---                                          ---                                         

      75   calendar: {                             86   calendar: {                      

      76     weeks: ['日', '一', '二', '三',       87     weeks: ['日', '一', '二', '三',

 '四', '五', '六'],                           '四', '五', '六'],                         

      77     months: ['一月', '二月', '三月'       88     months: ['一月', '二月', '三月'

, '四月', '五月', '六月', '七月', '          , '四月', '五月', '六月', '七月', '         

八月', '九月', '十月', '十一月', '十         八月', '九月', '十月', '十一月', '十        

二月'],                                      二月'],                                     

      78   },                                      89   },                               

      79   button: {                               90   button: {                        

                                                   91     next: '下一步',                

      80     cancel: '取消',                       92     cancel: '取消',                

      81     remove: '删除',                       93     remove: '删除',                

      82     save: '保存',                         94     save: '保存',                  

      83     ok: '确认',                           95     ok: '确认',                    

      84   },                                      96   },                               

```
